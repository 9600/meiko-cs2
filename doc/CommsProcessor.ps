%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%%BeginProlog
%
% FrameMaker postscript_prolog 3.0, for use with FrameMaker 3.0
% This postscript_prolog file is Copyright (c) 1986-1991 Frame Technology
% Corporation.  All rights reserved.  This postscript_prolog file may be
% freely copied and distributed in conjunction with documents created using
% FrameMaker.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 

% Set up Color vs. Black-and-White

/FMPrintInColor false def
/colorimage where { pop
    /currentcolortransfer where { pop
	/FMPrintInColor true def
	statusdict begin 
	    /processcolors where { 
		pop processcolors 1 le {
		    /FMPrintInColor false def
		} if
	    }{
		/deviceinfo where {
		    pop deviceinfo /Colors known { 
			deviceinfo /Colors get 1 le {
			    /FMPrintInColor false def
			} if
		    } if
		} if
	    } ifelse
	end
	/currentcanvas where {  % NeWSprint?
	    pop systemdict /separationdict known not {
		/FMPrintInColor false def
	    } if
	} if
    } if
} if


% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def

/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 22 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-BoldItalic FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Palatino-Italic FMFONTDEFINE
5 0 /Palatino-Roman FMFONTDEFINE
6 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
185 83.74 393.76 101.24 R
7 X
0 K
V
54 630 548 702 C
54 630 548 702 R
7 X
0 K
V
0 72 612 720 C
0 32 Q
0 X
0 K
8 (C) 58.19 676.66 S
1 27 Q
6.75 (omputing) 89.29 676.66 S
0 32 Q
8 (S) 82.98 645.61 S
1 27 Q
6.75 (urface) 108.77 645.61 S
56 670.94 547 670.94 2 L
0.5 H
2 Z
N
55 110 548 233.23 C
372 112 546 166 C
372 112 546 166 R
7 X
0 K
V
0 -322.62 -285.88 229.38 1.12 552 287 422 110.5 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
55 110 548 233.23 C
55 152.11 154 183.11 R
7 X
0 K
V
0 72 612 720 C
53 528.25 549 595 C
0 72 612 720 C
2 25 Q
0 X
0 K
-3.12 (Communications Processor Overview) 53 511.58 P
54.08 88.02 153.24 125.02 R
7 X
V
0 10 Q
0 X
(S1002\32010M100.04) 54.08 118.36 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
184.97 83.74 393.7 101.23 R
7 X
0 K
V
3 11 Q
0 X
-0.71 0.11 (The information supplied in this document is believed to be true but no liability is assumed for its use or for the) 54 640.67 B
-0.71 0.11 (infringements of the rights of others resulting from its use. No licence or other rights are granted in respect of any) 54 627.67 B
-0.71 0.11 (rights owned by any of the or) 54 614.67 B
-0.71 0.11 (ganisations mentioned herein.) 182.24 614.67 B
-0.71 0.11 (This document may not be copied, in whole or in part, without the prior written consent of Meiko W) 54 595.67 B
-0.71 0.11 (orld) 493.42 595.67 B
0.11 (Incorporated.) 54 582.67 S
-0.71 0.11 (Copyright \251 1993 Meiko W) 54 563.67 B
-0.71 0.11 (orld Incorporated.) 177.98 563.67 B
-0.71 0.11 (The speci\336cations listed in this document are subject to change without notice.) 54 544.67 B
-0.71 0.11 (Meiko, CS-2, Computing Surface, and CST) 54 525.67 B
-0.71 0.11 (ools are trademarks of Meiko Limited. Sun, Sun and a numeric suf) 246.44 525.67 B
-0.71 0.11 (\336x,) 539.02 525.67 B
-0.71 0.11 (Solaris, SunOS, AnswerBook, NFS, XV) 54 512.67 B
-0.71 0.11 (iew) 232.16 512.67 B
-0.71 0.11 (, and OpenW) 247.66 512.67 B
-0.71 0.11 (indows are trademarks of Sun Microsystems, Inc. All) 305.35 512.67 B
-0.71 0.11 (SP) 54 499.67 B
-0.71 0.11 (ARC trademarks are trademarks or registered trademarks of SP) 65.44 499.67 B
-0.71 0.11 (ARC International, Inc. Unix, Unix System V) 343.9 499.67 B
-0.71 0.11 (,) 544.88 499.67 B
-0.71 0.11 (and OpenLook are registered trademarks of Unix System Laboratories, Inc. The X W) 54 486.67 B
-0.71 0.11 (indows System is a) 429.51 486.67 B
-0.71 0.11 (trademark of the Massachusetts Institute of T) 54 473.67 B
-0.71 0.11 (echnology) 253.07 473.67 B
-0.71 0.11 (. A) 299.18 473.67 B
-0.71 0.11 (VS is a trademark of Advanced V) 310.81 473.67 B
-0.71 0.11 (isual Systems Inc.) 458.34 473.67 B
-0.71 0.11 (V) 54 460.67 B
-0.71 0.11 (erilog is a registered trademark of Cadence Design Systems, Inc. All other trademarks are acknowledged.) 60.83 460.67 B
-0.71 0.11 (Circulation Control:) 54 192.67 B
4 F
0.11 (External) 151.67 192.67 S
0 F
(Meiko\325) 126 418.67 T
(s addr) 159.2 418.67 T
(ess in the US is:) 188.65 418.67 T
(Meiko) 126 392.67 T
(130 Baker A) 126 379.67 T
(venue) 183.85 379.67 T
(Concord MA01742) 126 366.67 T
(508 371 0088) 126 340.67 T
(Fax: 508 371 7516) 126 327.67 T
(Meiko\325) 306 418.67 T
(s full addr) 339.2 418.67 T
(ess in the UK is:) 387.29 418.67 T
(Meiko Limited) 306 392.67 T
(650 Aztec W) 306 379.67 T
(est) 364.65 379.67 T
(Bristol) 306 366.67 T
(BS12 4SD) 306 353.67 T
(T) 306 327.67 T
(el: 01454 616171) 312.33 327.67 T
(Fax: 01454 618188) 306 314.67 T
3 F
(Issue Status:) 60 264.67 T
(Draft) 133.78 264.67 T
(Preliminary) 133.78 249.67 T
(Release) 133.78 234.67 T
(x) 201.06 234.67 T
(Obsolete) 133.78 219.67 T
195 244 214.25 258.75 R
0.5 H
2 Z
N
195 229 214.25 243.75 R
N
195 259 214.25 273.75 R
N
195 214 214.25 228.75 R
N
FMENDPAGE
%%EndPage: "2" 3
%%Page: "i" 3
612 792 0 FMBEGINPAGE
5 9 Q
0 X
0 K
0.09 (i) 555.29 108.7 S
197 482 558 482 2 L
0.5 H
2 Z
N
4 20 Q
(Contents) 198 489 T
185 83.74 393.76 101.24 R
7 X
V
0 14 Q
0 X
0.14 (1.) 198 457.01 S
0.14 (Overview) 234 457.01 S
0.14 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 294.83 457.01 S
0.14 (1) 550.86 457.01 S
0.14 (2.) 198 425.01 S
0.14 (Inter) 234 425.01 S
0.14 (-pr) 264.51 425.01 S
0.14 (ocessor Communications) 283.33 425.01 S
0.14 (. . . . . . . . . . . . .) 436.79 425.01 S
0.14 (3) 550.86 425.01 S
3 11 Q
0.11 (Latency and Bandwidth) 270 403.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . .) 377.51 403.01 S
0.11 (4) 552.39 403.01 S
0.11 (Network Security) 270 388.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 351.77 388.01 S
0.11 (4) 552.39 388.01 S
0.11 (V) 270 373.01 S
0.11 (irtual Addressing) 277.39 373.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 357.49 373.01 S
0.11 (5) 552.39 373.01 S
0 14 Q
0.14 (3.) 198 342.01 S
0.14 (Elan Functionality) 234 342.01 S
0.14 (. . . . . . . . . . . . . . . . . . . . . . . . .) 349.43 342.01 S
0.14 (7) 550.86 342.01 S
3 11 Q
0.11 (Checking) 270 320.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 314.59 320.01 S
0.11 (7) 552.39 320.01 S
0.11 (T) 270 305.01 S
0.11 (ranslation) 276.45 305.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 323.17 305.01 S
0.11 (8) 552.39 305.01 S
0.11 (Copying) 270 290.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 308.87 290.01 S
0.11 (9) 552.39 290.01 S
0.11 (Device Control) 270 275.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 340.33 275.01 S
0.11 (10) 546.78 275.01 S
0.11 (Thread Processor) 270 260.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 348.91 260.01 S
0.11 (10) 546.78 260.01 S
0.11 (Thread code) 306 245.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 363.21 245.01 S
0.11 (1) 547.19 245.01 S
0.11 (1) 552.39 245.01 S
0.11 (Events) 306 230.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 337.47 230.01 S
0.11 (1) 547.19 230.01 S
0.11 (1) 552.39 230.01 S
0.11 (Other Forms of Remote Access) 306 215.01 S
0.11 ( . . . . . . . . . . . . . .) 449.01 215.01 S
0.11 (12) 546.78 215.01 S
0 14 Q
0.14 (4.) 198 184.01 S
0.14 (Using the Communications Pr) 234 184.01 S
0.14 (ocessor) 417.58 184.01 S
0.14 ( . . . . . . . . .) 462.27 184.01 S
0.14 (13) 543.72 184.01 S
3 11 Q
0.11 (DMA T) 270 162.01 S
0.11 (ransfers) 305.3 162.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 343.19 162.01 S
0.11 (13) 546.78 162.01 S
FMENDPAGE
%%EndPage: "i" 4
%%Page: "ii" 4
612 792 0 FMBEGINPAGE
5 9 Q
0 X
0 K
0.09 (ii) 54 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
0 14 Q
0 X
0.14 (5.) 198 638.67 S
0.14 (Conclusions) 234 638.67 S
0.14 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 309.39 638.67 S
0.14 (15) 543.72 638.67 S
FMENDPAGE
%%EndPage: "ii" 5
%%Page: "1" 5
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (1) 553.41 108.7 S
54 103.2 86.66 121.2 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.74 105.76 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
198 500.18 558 500.18 2 L
0.3 H
2 Z
0 X
0 K
N
185 83.74 393.76 101.24 R
7 X
V
55.01 522.61 558.36 589.36 C
0 72 612 720 C
2 18 Q
0 X
0 K
-2.07 -0.36 (Overview) 199.01 510.61 B
2 24 Q
(1) 545.14 510.61 T
3 11 Q
0.57 0.11 (Ef) 198 459.01 B
0.57 0.11 (fective cooperation between processing elements is a crucial factor in deter-) 208.41 459.01 B
0.28 0.11 (mining the overall performance of an MPP system. Maintaining ef) 198 446.01 B
0.28 0.11 (fective inter) 499.9 446.01 B
0.28 0.11 (-) 554.23 446.01 B
0.3 0.11 (processor communication as a system scales in size is a vital aspect of preserv-) 198 433.01 B
0.57 0.11 (ing balance.) 198 420.01 B
0.57 0.11 (In designing the CS-2 architecture Meiko has concentrated on minimising the) 198 399.01 B
0.02 0.11 (impact of sharing work between processors. The ef) 198 386.01 B
0.02 0.11 (fect of this is to increase the) 428.17 386.01 B
0.57 0.11 (number of processors that can be used ef) 198 373.01 B
0.57 0.11 (fectively to solve a problem, improv-) 385.51 373.01 B
0.38 0.11 (ing the performance of existing parallel programs and making parallel process-) 198 360.01 B
0.57 0.11 (ing ef) 198 347.01 B
0.57 0.11 (\336cient for a wider range of applications.) 224.39 347.01 B
0.38 0.11 (Every processing element in a CS-2 system has its own, dedicated interface to) 198 326.01 B
0.57 0.11 (the communications network: a Meiko designed communications processor) 198 313.01 B
0.57 0.11 (.) 541.09 313.01 B
0.01 0.11 (The communications processor has a SP) 198 300.01 B
0.01 0.11 (ARC shared memory interface and two) 378.62 300.01 B
0.57 0.11 (data links. Data links are connected by Meiko designed 8) 198 287.01 B
6 F
0.55 (\264) 461.04 287.01 P
3 F
0.57 0.11 (8 cross-point) 467.08 287.01 B
0.57 0.11 (switches. Data links are byte wide in each direction and operate at 70) 198 274.01 B
0.57 0.11 (MHz,) 518.15 274.01 B
0.57 0.11 (providing 50) 198 261.01 B
0.57 0.11 (Mbytes/s of user bandwidth in each direction.) 257.44 261.01 B
0.57 0.11 (The communications processor supports remote read, write and synchronisa-) 198 240.01 B
0.57 0.11 (tion operations speci\336ed by virtual processor number and virtual address \321) 198 227.01 B
0.35 0.11 (both are checked in hardware. Latency hiding is supported by non-blocking in-) 198 214.01 B
0.57 0.11 (structions, instruction sequences and completion tests.) 198 201.01 B
FMENDPAGE
%%EndPage: "1" 6
%%Page: "2" 6
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (2) 54 108.7 S
3 10 Q
0.1 (S1002\32010M100.04) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
3 11 Q
0 X
0 K
0.57 0.11 (This document provides an overview of the design of the communications) 198 640.67 B
0.57 0.11 (processor and its usage. For more information about the architecture of the) 198 627.67 B
0.57 0.11 (data network see the) 198 614.67 B
1 F
0.57 0.11 (Communications Network Overview) 295.46 614.67 B
3 F
0.57 0.11 (.) 458.78 614.67 B
0 F
0.57 0.11 (Figur) 198 593.67 B
0.57 0.11 (e 1-1) 224.63 593.67 B
0.57 0.11 ( The Elan Communications Pr) 261 593.67 B
0.57 0.11 (ocessor) 409.07 593.67 B
54 144 558 648 C
198 338 558 590 C
0 45 46 387 386 221.61 220.32 271.7 354.68 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (elan.art)
%%CreationDate: (15/2/92) (13:03)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%BoundingBox: 45 46 387 386
%%TemplateBox:288 360 288 360
%%TileBox:-507 813 31 1594
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%BeginEncoding: _Helvetica Helvetica
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
]/_Helvetica/Helvetica 0 Z
%%EndEncoding
%%EndSetup
0 A
u
0 O
0.95 g
0 i 0 J 0 j 1 w 4 M []0 d
%%Note:
384 117 m
384 49 L
48 49 L
48 117 L
384 117 L
f
216 83 m
F
U
0 g
0 R
0 G
98 264 m
331 264 l
B
98 194 m
98 127 l
S
0 O
0 g
163 278 m
163 248 l
B
331 278 m
331 248 l
B
277 347 m
277 265 l
B
163 194 m
163 127 l
B
163 106 m
163 82 l
B
98 106 m
98 82 l
B
203 159 m
177 159 l
177 128 l
S
204 176 m
113 176 l
113 128 l
S
0 O
0 g
333 195 m
333 128 l
B
293 163 m
319 163 l
319 128 l
S
114 84 m
114 95 l
332 95 l
332 106 l
S
149 95 m
149 85 l
S
0 O
0 g
98 278 m
98 248 l
B
228 278 m
228 248 l
B
u
1 g
124.6077 278.7917 m
124.6077 332.2317 L
70.8479 332.2317 L
70.8479 278.7917 L
124.6077 278.7917 L
b
97.7278 305.5117 m
B
U
u
190.4634 278.7917 m
190.4634 332.2317 L
136.7036 332.2317 L
136.7036 278.7917 L
190.4634 278.7917 L
b
163.5835 305.5117 m
B
U
u
256.3191 278.7917 m
256.3191 332.2317 L
202.5593 332.2317 L
202.5593 278.7917 L
256.3191 278.7917 L
b
229.4392 305.5117 m
B
U
u
358.4626 278.7917 m
358.4626 332.2317 L
304.7029 332.2317 L
304.7029 278.7917 L
358.4626 278.7917 L
b
331.5828 305.5117 m
B
U
u
358.4626 347.482 m
358.4626 369.6396 L
256.3282 369.6396 L
256.3282 347.482 L
358.4626 347.482 L
b
307.3954 358.5608 m
B
U
u
124.6077 105.6663 m
124.6077 127.8239 L
70.8479 127.8239 L
70.8479 105.6663 L
124.6077 105.6663 L
b
97.7278 116.7451 m
B
U
u
190.4634 105.6663 m
190.4634 127.8239 L
136.7036 127.8239 L
136.7036 105.6663 L
190.4634 105.6663 L
b
163.5835 116.7451 m
B
U
u
358.4626 105.6663 m
358.4626 127.8239 L
304.7029 127.8239 L
304.7029 105.6663 L
358.4626 105.6663 L
b
331.5828 116.7451 m
B
U
u
124.6077 194.6238 m
124.6077 248.0638 L
70.8479 248.0638 L
70.8479 194.6238 L
124.6077 194.6238 L
b
97.7278 221.3438 m
B
U
u
190.4634 194.6238 m
190.4634 248.0638 L
136.7036 248.0638 L
136.7036 194.6238 L
190.4634 194.6238 L
b
163.5835 221.3438 m
B
U
u
292.7415 145.7507 m
292.7415 247.4168 L
202.5593 247.4168 L
202.5593 145.7507 L
292.7415 145.7507 L
b
247.6504 196.5838 m
B
U
u
358.4626 194.6238 m
358.4626 248.0638 L
304.7029 248.0638 L
304.7029 194.6238 L
358.4626 194.6238 L
b
331.5828 221.3438 m
B
U
0.95 g
307 370 m
307 383 l
B
332 332 m
332 347 l
B
0 g
/_Helvetica 10 10 0 1 z
[1 0 0 1 98 303]e
5 (Reply)t
T
[1 0 0 1 163 303]e
6 (Thread)t
T
[1 0 0 1 228 303]e
3 (DMA)t
T
[1 0 0 1 331 303]e
7 (Command)t
T
[1 0 0 1 307 355]e
14 (MBus Interface)t
T
[1 0 0 1 98 219]e
7 (Input 0)t
T
[1 0 0 1 164 219]e
7 (Input 1)t
T
[1 0 0 1 333 219]e
6 (Output)t
T
[1 0 0 1 98 114]e
6 (Buffer)t
T
[1 0 0 1 163 114]e
6 (Buffer)t
T
[1 0 0 1 333 114]e
6 (Buffer)t
T
[1 0 0 1 248 198]e
8 (Internal)t
6 (Memory)t
T
u
0 R
0 G
104.25 49 m
104.25 63 L
97.75 63 L
97.75 49 L
104.25 49 L
b
101 56 m
B
U
u
166 49 m
166 63 L
159.5 63 L
159.5 49 L
166 49 L
b
162.75 56 m
B
U
u
1 g
183.7434 62.9143 m
183.7434 85.072 L
80.2557 85.072 L
80.2557 62.9143 L
183.7434 62.9143 L
b
131.9996 73.9931 m
B
U
0 g
[1 0 0 1 134 71]e
12 (2 way Switch)t
T
[1 0 0 1 296 71]e
23 (High Speed Clock Domain)t
T
[1 0 0 1 150 355]e
19 (System Clock Domain)t
T
u
0 R
0 G
383.9985 49 m
383.9985 382.9996 L
48 382.9996 L
48 49 L
383.9985 49 L
s
215.9993 215.9998 m
S
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
54 144 558 648 C
0 72 612 720 C
FMENDPAGE
%%EndPage: "2" 7
%%Page: "3" 7
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (3) 553.41 108.7 S
54 103.2 86.66 121.2 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.74 105.76 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
198 500.18 558 500.18 2 L
0.3 H
2 Z
0 X
0 K
N
185 83.74 393.76 101.24 R
7 X
V
55.01 522.61 558.36 589.36 C
0 72 612 720 C
2 18 Q
0 X
0 K
-2.07 -0.36 (Inter-processor Communications) 199.01 510.61 B
2 24 Q
(2) 545.14 510.61 T
3 11 Q
0.57 0.11 (In a distributed memory system work is shared between processors by ex-) 198 459.01 B
0.57 0.11 (changing data over a communications network. The ef) 198 446.01 B
0.57 0.11 (\336ciency of data ex-) 446.92 446.01 B
0.57 0.11 (change controls the ef) 198 433.01 B
0.57 0.11 (fectiveness of work sharing and hence the number of) 298.77 433.01 B
0.57 0.11 (processors that can be used on a given problem.) 198 420.01 B
0.57 0.11 (Rather than design a new processor with built in communications capability) 198 399.01 B
0.57 0.11 (Meiko chose to separate the issues in the design of the CS-2. Processing ele-) 198 386.01 B
0.56 0.11 (ments consist of a high performance RISC CPU \050with optional vector process-) 198 373.01 B
0.57 0.11 (ing capabilities\051 and a dedicated communications processor) 198 360.01 B
0.57 0.11 (.) 469.32 360.01 B
0.57 0.11 (The interface between the communications processor and the rest of the) 198 339.01 B
0.19 0.11 (processing element is central to the ef) 198 326.01 B
0.19 0.11 (\336ciency of the CS-2 network. It provides) 369.39 326.01 B
0.57 0.11 (the following essential features:) 198 313.01 B
0 14 Q
(\245) 198 292.01 T
3 11 Q
0.57 0.11 (Low communication start-up latency) 210.6 292.01 B
0.57 0.11 (.) 377.57 292.01 B
0 14 Q
(\245) 198 270.61 T
3 11 Q
0.57 0.11 (High bandwidth inter) 210.6 270.61 B
0.57 0.11 (-processor communication.) 307.83 270.61 B
0 14 Q
(\245) 198 249.21 T
3 11 Q
0.57 0.11 (Security against corruption.) 210.6 249.21 B
0 14 Q
(\245) 198 227.81 T
3 11 Q
0.57 0.11 (Operation in a network-wide virtual addressing, virtual process) 210.6 227.81 B
0.57 0.11 (environment.) 210.6 214.41 B
FMENDPAGE
%%EndPage: "3" 8
%%Page: "4" 8
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (4) 54 108.7 S
3 10 Q
0.1 (S1002\32010M100.04) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (2) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
2 15 Q
0 X
0 K
-0.98 0.15 (Latency and Bandwidth) 54 638 B
3 11 Q
0.57 0.11 (Ef) 198 615.67 B
0.57 0.11 (\336cient inter) 208.41 615.67 B
0.57 0.11 (-processor communication requires both low latency and high) 260.49 615.67 B
0.57 0.11 (bandwidth. While solutions to the bandwidth problem can be addressed by) 198 602.67 B
0.57 0.11 (ever improving hardware technology) 198 589.67 B
0.57 0.11 (, these improvements only exacerbate un-) 365.56 589.67 B
0.57 0.11 (derlying latency problems.) 198 576.67 B
0.18 0.11 (T) 198 555.67 B
0.18 0.11 (o show that this is the case consider a system with a communications start-up) 204.06 555.67 B
0.57 0.11 (latency of 10) 198 542.67 B
6 F
0.57 0.11 (m) 259.03 542.67 B
3 F
0.57 0.11 (s. T) 265.47 542.67 B
0.57 0.11 (o transfer a 100 byte message via a 1) 282.21 542.67 B
0.57 0.11 (Mbyte/s network we) 454.39 542.67 B
0.25 0.11 (will get an achieved bandwidth of 0.9) 198 529.67 B
0.25 0.11 (Mbytes/s \05090% ef) 370.5 529.67 B
0.25 0.11 (\336ciency\051. For the same) 450.78 529.67 B
0.57 0.11 (transfer over a 50) 198 516.67 B
0.57 0.11 (Mbytes/s network, the achieved bandwidth is just) 279.99 516.67 B
0.3 0.11 (8.3) 198 503.67 B
0.3 0.11 (Mbytes/s \05016% ef) 213.1 503.67 B
0.3 0.11 (\336ciency\051. Clearly the improvements in bandwidth for this) 293.48 503.67 B
0.16 0.11 (example system have been severely limited by the start-up latency and the size) 198 490.67 B
0.57 0.11 (of the data transfer) 198 477.67 B
0.57 0.11 (.) 284.08 477.67 B
0.57 0.11 (By using a dedicated communications processor Meiko have reduced start-up) 198 456.67 B
0.16 0.11 (latency by implementing in hardware the communications code that would nor-) 198 443.67 B
0.57 0.11 (mally execute on the main processor) 198 430.67 B
0.57 0.11 (.) 365.1 430.67 B
0.57 0.11 (The data links joining communications processors and network switches are) 198 409.67 B
0.57 0.11 (byte wide in each direction. Links are clocked at 70) 198 396.67 B
0.57 0.11 (MHz. Their bandwidth af-) 437.17 396.67 B
0.57 0.11 (ter protocol is 50) 198 383.67 B
0.57 0.11 (MBytes/s in each direction. The CS-2 data network is a fat) 277.57 383.67 B
0.57 0.11 (tree with constant bandwidth between stages. It is capable of supporting full) 198 370.67 B
0.57 0.11 (bandwidth transfers between all pairs of processors \050see the) 198 357.67 B
1 F
0.57 0.11 (Communication) 474.7 357.67 B
0.57 0.11 (Network Overview) 198 344.67 B
3 F
0.57 0.11 ( for more details\051.) 282.51 344.67 B
0.57 0.11 (Moving communications code from the main processor to a communications) 198 323.67 B
-0.03 0.11 (engine does not in itself reduce latency) 198 310.67 B
-0.03 0.11 (. Performance improvements come from) 373.21 310.67 B
0.57 0.11 (running the right code in the right places. In particular there are signi\336cant) 198 297.67 B
0.57 0.11 (bene\336ts to be had from moving the lightweight interrupt intensive operations) 198 284.67 B
0.57 0.11 (associated with inter) 198 271.67 B
0.57 0.11 (-process communication of) 291.66 271.67 B
0.57 0.11 (f a conventional microproces-) 415.11 271.67 B
0.57 0.11 (sor and onto a communications processor designed speci\336cally for this pur-) 198 258.67 B
0.11 (pose.) 198 245.67 S
2 15 Q
-0.98 0.15 (Network Security) 54 212 B
3 11 Q
0.57 0.11 (The CS-2 communications network is shared by both user and system level) 198 189.67 B
0.57 0.11 (communications so it is vital that a security mechanism is used to prevent un-) 198 176.67 B
0.57 0.11 (related communications from interacting. T) 198 163.67 B
0.57 0.11 (o relieve the burden of checking) 395.69 163.67 B
0.57 0.11 (from the main processor and to reduce start up latency) 198 150.67 B
0.57 0.11 (, the main processor is-) 447.56 150.67 B
FMENDPAGE
%%EndPage: "4" 9
%%Page: "5" 9
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (Inter) 90.28 108.7 S
0.1 (-processor Communications) 109.46 108.7 S
3 9 Q
0.09 (5) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (2) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
3 11 Q
0 X
0.57 0.11 (sues unchecked communication instructions to the communications processor) 198 640.67 B
0.57 0.11 (,) 551.47 640.67 B
0.57 0.11 (the communications processor then implements the security strategy in hard-) 198 627.67 B
0.57 0.11 (ware. This mechanism is preferable to the more conventional use of kernel) 198 614.67 B
0.57 0.11 (mapped devices, which use checked system calls to access the device, often) 198 601.67 B
0.57 0.11 (with a signi\336cant performance impact \050a checked system call in a 40) 198 588.67 B
0.57 0.11 (MHz) 514.2 588.67 B
0.12 0.11 (SP) 198 575.67 B
0.12 0.11 (ARC takes approximately 50) 209.44 575.67 B
6 F
0.12 0.11 (m) 341.7 575.67 B
3 F
0.12 0.11 (s\051. The CS-2 network protects processes from) 348.14 575.67 B
0.57 0.11 (communications errors that occur within other unrelated processes, but does) 198 562.67 B
0.57 0.11 (not protect a process from errors within itself. This is the same model as that) 198 549.67 B
0.57 0.11 (employed for memory protection by the UNIX operating system \321 processes) 198 536.67 B
0.57 0.11 (are protected from each other) 198 523.67 B
0.57 0.11 (, but not from themselves.) 332.54 523.67 B
2 15 Q
-0.98 0.15 (V) 54 490 B
-0.98 0.15 (irtual Addressing) 63.33 490 B
3 11 Q
0.16 0.11 (The communications processor uses separate page tables from the main proces-) 198 467.67 B
0.57 0.11 (sor) 198 454.67 B
0.57 0.11 (. This means that a user process need not make its entire address space vis-) 211.17 454.67 B
0.57 0.11 (ible when it communicates, only the portion that contains the data need be) 198 441.67 B
0.57 0.11 (mapped for communication. Secondly) 198 428.67 B
0.57 0.11 (, separate page tables may be used to re-) 370.77 428.67 B
0.57 0.11 (duce the amount of cache \337ushing in non cache-coherent systems; in a write) 198 415.67 B
0.18 0.11 (through cache only those pages that are mapped with write permission need be) 198 402.67 B
0.11 (\337ushed.) 198 389.67 S
-0.02 0.11 (The two sets of page tables are kept in step by a modi\336ed page out daemon and) 198 368.67 B
0.57 0.11 (new page in code in the operating system. The modi\336ed page out daemon) 198 355.67 B
0.57 0.11 (modi\336es both sets of tables, whereas the new page in code handles the asyn-) 198 342.67 B
0.57 0.11 (chronous page faults from the communications processor) 198 329.67 B
0.57 0.11 (.) 458.5 329.67 B
FMENDPAGE
%%EndPage: "5" 10
%%Page: "6" 10
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (6) 54 108.7 S
3 10 Q
0.1 (S1002\32010M100.04) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (2) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
FMENDPAGE
%%EndPage: "6" 11
%%Page: "7" 11
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (7) 553.41 108.7 S
54 103.2 86.66 121.2 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.74 105.76 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
198 500.18 558 500.18 2 L
0.3 H
2 Z
0 X
0 K
N
185 83.74 393.76 101.24 R
7 X
V
55.01 522.61 558.36 589.36 C
0 72 612 720 C
2 18 Q
0 X
0 K
-2.07 -0.36 (Elan Functionality) 199.01 510.61 B
2 24 Q
(3) 545.14 510.61 T
3 11 Q
0.11 0.11 (The functionality of the communications processor was decided by drawing on) 198 459.01 B
0.57 0.11 (experience from Meiko\325) 198 446.01 B
0.57 0.11 (s CST) 307.87 446.01 B
0.57 0.11 (ools/CSN communication software, used to cre-) 335.42 446.01 B
0.55 0.11 (ate a programming environment over T) 198 433.01 B
0.55 0.11 (ransputer networks, and other message) 377.55 433.01 B
0.57 0.11 (passing systems such as the Chorus Nucleus. This analysis showed that the) 198 420.01 B
0.57 0.11 (start-up process consists of four components:) 198 407.01 B
0 14 Q
(\245) 198 386.01 T
3 11 Q
0.57 0.11 (Checking.) 210.6 386.01 B
0 14 Q
(\245) 198 364.61 T
3 11 Q
0.11 (T) 210.6 364.61 S
0.11 (ranslation.) 217.05 364.61 S
0 14 Q
(\245) 198 343.21 T
3 11 Q
0.11 (Copying.) 210.6 343.21 S
0 14 Q
(\245) 198 321.81 T
3 11 Q
0.57 0.11 (Device control.) 210.6 321.81 B
0.57 0.11 (Each of which is important if start-up latency is to be minimised.) 198 300.41 B
2 15 Q
0.15 (Checking) 54 266.74 S
3 11 Q
0.57 0.11 (The CS-2 supports virtual memory addressing on each processing element, al-) 198 244.41 B
0.57 0.11 (lowing it to implement a fully distributed store for operating system use, and) 198 231.41 B
0.57 0.11 (permit it to implement the applications binary interface \050ABI\051 for the base mi-) 198 218.41 B
0.57 0.11 (croprocessors. The communications processor therefore has two types of pa-) 198 205.41 B
0.57 0.11 (rameters to check: memory addresses and process addresses.) 198 192.41 B
FMENDPAGE
%%EndPage: "7" 12
%%Page: "8" 12
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (8) 54 108.7 S
3 10 Q
0.1 (S1002\32010M100.04) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (3) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
3 11 Q
0 X
0 K
0.57 0.11 (The communications processor receives unchecked virtual memory addresses) 198 640.67 B
0.57 0.11 (from the main processor so it must incorporate a memory management unit) 198 627.67 B
0.57 0.11 (\050MMU\051. The MMU used within the Elan supports multiple simultaneous con-) 198 614.67 B
0.57 0.11 (texts allowing I/O to continue for suspended processes.) 198 601.67 B
0.33 0.11 (The checking of process addresses is analogous to the checking of memory ad-) 198 580.67 B
0.01 0.11 (dresses. It is implemented by a simple table look-up and exception mechanism.) 198 567.67 B
-0.01 0.11 (The communications processor is designed to handle the common case where a) 198 554.67 B
-0.04 0.11 (user is trying to communicate with other processes for which it has permission;) 198 541.67 B
0.34 0.11 (an exception is generated whenever there is no permission. As checking is per-) 198 528.67 B
0.57 0.11 (formed independently on each of the communications processors, failed) 198 515.67 B
-0.06 0.11 (processing elements can be removed from service by removing them from each) 198 502.67 B
0.57 0.11 (communications processor) 198 489.67 B
0.57 0.11 (\325) 319.24 489.67 B
0.57 0.11 (s list of valid destinations.) 322.41 489.67 B
2 15 Q
0.15 (T) 54 456 S
0.15 (ranslation) 62.76 456 S
3 11 Q
0.2 0.11 (Process and memory translation within the communications processor is imple-) 198 433.67 B
0.57 0.11 (mented through the same mechanism as the checking, that is, by table look-) 198 420.67 B
0.57 0.11 (ups. Memory address translation yields the same results as the main proces-) 198 407.67 B
0.57 0.11 (sor) 198 394.67 B
0.57 0.11 (\325) 212.18 394.67 B
0.57 0.11 (s translation mechanism. Dynamic process translation yields two compo-) 215.35 394.67 B
0.47 0.11 (nents: a destination processor and a destination context. There are no physical) 198 381.67 B
0.57 0.11 (processor or memory addresses in user space) 198 368.67 B
FMENDPAGE
%%EndPage: "8" 13
%%Page: "9" 13
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (Elan Functionality) 90.28 108.7 S
3 9 Q
0.09 (9) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (3) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
0 11 Q
0 X
0.57 0.11 (Figur) 198 640.67 B
0.57 0.11 (e 3-1) 224.63 640.67 B
0.57 0.11 (Elan Pr) 261 640.67 B
0.57 0.11 (ocess T) 298.51 640.67 B
0.57 0.11 (ranslation) 332.95 640.67 B
3 F
0.57 0.11 (V) 198 394.64 B
0.57 0.11 (irtual process IDs are translated through a per context virtual to physical) 205.39 394.64 B
0.57 0.11 (processor translation which points at the route bytes needed to direct a mes-) 198 381.64 B
0.57 0.11 (sage to this processor) 198 368.64 B
0.57 0.11 (.) 295.93 368.64 B
2 15 Q
0.15 (Copying) 54 334.97 S
3 11 Q
0.22 0.11 (The communications processor supports a number of features to remove the re-) 198 312.64 B
0.29 0.11 (quirement for copying of data. By using network wide virtual addressing there) 198 299.64 B
0.31 0.11 (is no need to copy data into physically mapped output buf) 198 286.64 B
0.31 0.11 (fers, a common tech-) 462 286.64 B
0.36 0.11 (nique in distributed systems to overcome the problems of virtual address trans-) 198 273.64 B
0.15 0.11 (lation and page locking during communication. Furthermore, because the main) 198 260.64 B
0.57 0.11 (processor and the communications processor share a common memory bus \050a) 198 247.64 B
0.57 0.11 (SP) 198 234.64 B
0.57 0.11 (ARC MBus\051 and the same cache coherency protocols, the problems associ-) 209.44 234.64 B
0.57 0.11 (ated with cache coherency are also avoided.) 198 221.64 B
0.57 0.11 (Clearly the avoidance of unnecessary copying contributes greatly to reduced) 198 200.64 B
0.41 0.11 (start-up latency and ef) 198 187.64 B
0.41 0.11 (\336cient use of memory bandwidth. For messages that are) 299.61 187.64 B
0.57 0.11 (copied once on sending, this adds) 198 174.64 B
0.57 0.11 ( to the) 518.56 174.64 B
0.57 0.11 (start-up latency) 198 161.64 B
0.57 0.11 (, and consumes three times as much store bandwidth.) 267.74 161.64 B
54 144 558 648 C
198 416.97 558 637 C
0 15 38 424 247 359.92 183.92 198.04 435.04 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (trans.art)
%%CreationDate: (20/4/93) (1:38 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%BoundingBox:15 38 424 247
%%TemplateBox:288 360 288 360
%%TileBox:-538 781 0 1562
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%BeginEncoding: _Helvetica Helvetica
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
]/_Helvetica/Helvetica 0 Z
%%EndEncoding
%%EndSetup
0 A
u
0 O
1 g
0 R
0 G
0 i 0 J 0 j 1 w 4 M []0 d
%%Note:
97 225 m
97 76 L
61 76 L
61 225 L
97 225 L
b
79 150.5 m
B
U
u
97 162 m
97 146 L
61 146 L
61 162 L
97 162 L
b
79 154 m
B
U
u
u
185 225 m
185 76 L
149 76 L
149 225 L
185 225 L
b
167 150.5 m
B
U
u
185 137 m
185 121 L
149 121 L
149 137 L
185 137 L
b
167 129 m
B
U
U
u
u
221 225 m
221 76 L
185 76 L
185 225 L
221 225 L
b
203 150.5 m
B
U
u
221 137 m
221 121 L
185 121 L
185 137 L
221 137 L
b
203 129 m
B
U
U
u
313 225 m
313 76 L
277 76 L
277 225 L
313 225 L
b
295 150.5 m
B
U
u
349 225 m
349 76 L
313 76 L
313 225 L
349 225 L
b
331 150.5 m
B
U
u
385 225 m
385 76 L
349 76 L
349 225 L
385 225 L
b
367 150.5 m
B
U
u
421 225 m
421 76 L
385 76 L
385 225 L
421 225 L
b
403 150.5 m
B
U
u
u
313 176 m
313 160 L
277 160 L
277 176 L
313 176 L
b
295 168 m
B
U
u
349 176 m
349 160 L
313 160 L
313 176 L
349 176 L
b
331 168 m
B
U
u
385 176 m
385 160 L
349 160 L
349 176 L
385 176 L
b
367 168 m
B
U
u
421 176 m
421 160 L
385 160 L
385 176 L
421 176 L
b
403 168 m
B
U
U
60.5 154.5 m
39.5 154.5 l
39.5 64 l
39.5 154.5 l
39.5 154.5 l
39.5 154.5 l
39.5 154.5 l
39.5 67.5 l
B
0 g
57.937 157.062 m
60.5 154.5 l
57.937 151.875 l
57.937 157.062 l
b
1 g
149 225 m
128 225 l
128 153.5 l
128 225 l
128 225 l
128 225 l
128 225 l
128 153.5 l
B
0 g
146.437 227.562 m
149 225 l
146.437 222.375 l
146.437 227.562 l
b
u
1 g
149 128.5 m
128 128.5 l
128 64.5 l
128 128.5 l
128 128.5 l
128 128.5 l
128 128.5 l
128 64.5 l
B
0 g
146.437 131.062 m
149 128.5 l
146.437 125.875 l
146.437 131.062 l
b
U
1 g
277 168.5 m
256 168.5 l
B
256 168.5 m
256 168.5 l
256 168.5 l
256 168.5 l
256 128 l
B
0 g
274.437 171.062 m
277 168.5 l
274.437 165.875 l
274.437 171.062 l
b
97 153.5 m
128 153.5 l
B
221 128 m
256 128 l
B
/_Helvetica 10 10 0 1 z
[1 0 0 1 78 238]e
13 (Context Table)t
T
[1 0 0 1 187 238]e
21 (Virtual Process Table)t
T
[1 0 0 1 349 238]e
13 (Routing Table)t
T
[1 0 0 1 40 50]e
7 (Context)t
6 (Number)t
T
[1 0 0 1 129 50]e
15 (Virtual Process)t
6 (Number)t
T
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
54 144 558 648 C
0 72 612 720 C
352.36 170.64 518.56 181.79 C
1 9 Q
0 X
0 K
(m) 358.75 174.64 T
(e) 365.78 174.64 T
(s) 370.3 174.64 T
(s) 374.33 174.64 T
(a) 378.36 174.64 T
(g) 383.39 174.64 T
(e) 388.42 174.64 T
(s) 392.95 174.64 T
(i) 396.98 174.64 T
(z) 400.01 174.64 T
(e) 404.04 174.64 T
3 F
(2) 417.48 174.64 T
6 F
(\264) 410.29 174.64 T
(\050) 354.86 174.64 T
(\051) 422.37 174.64 T
1 F
(m) 438.26 174.64 T
(e) 445.29 174.64 T
(m) 449.81 174.64 T
(o) 456.84 174.64 T
(r) 461.87 174.64 T
(y) 465.9 174.64 T
(b) 470.43 174.64 T
(a) 475.45 174.64 T
(n) 480.48 174.64 T
(d) 485.51 174.64 T
(w) 490.54 174.64 T
(i) 497.08 174.64 T
(d) 500.11 174.64 T
(t) 505.14 174.64 T
(h) 508.17 174.64 T
6 F
(\050) 434.37 174.64 T
(\051) 513.06 174.64 T
(\244) 429.12 174.64 T
0 72 612 720 C
FMENDPAGE
%%EndPage: "9" 14
%%Page: "10" 14
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (10) 54 108.7 S
3 10 Q
0.1 (S1002\32010M100.04) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (3) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
2 15 Q
0 X
0 K
-0.98 0.15 (Device Control) 54 638 B
3 11 Q
0.26 0.11 (The \336nal requirement of message start-up code is in device control. This is set-) 198 615.67 B
0.57 0.11 (ting up the communications parameters in store, signalling to the communica-) 198 602.67 B
0.57 0.11 (tion device, and responding to interrupts returned by the communications) 198 589.67 B
0.11 (processor) 198 576.67 S
0.11 (.) 240.54 576.67 S
0.57 0.11 (Control of the communications processor is via a command port which is nor-) 198 555.67 B
0.57 0.11 (mally mapped into the user address space. The command port consists of a) 198 542.67 B
0.41 0.11 (range of memory addresses. The communications processor command is deter-) 198 529.67 B
0.57 0.11 (mined by extracting 5 bits from the address that is used. The data that is used) 198 516.67 B
0.54 0.11 (by the communications processor command corresponds to the 32 bits of data) 198 503.67 B
0.5 0.11 (that are written to that memory address. Commands sent to the command port) 198 490.67 B
0.37 0.11 (are written in a single read-modify-write cycle and are acknowledged with the) 198 477.67 B
0.57 0.11 (value that is read back \050which will be non-negative if the command is accept-) 198 464.67 B
0.57 0.11 (ed\051. The kernel can prevent the user issuing certain commands by mapping) 198 451.67 B
0.57 0.11 (limited portions of the command port address space in to the user address) 198 438.67 B
0.11 (space.) 198 425.67 S
0.18 0.11 (Exceptions generated by the communications processor may be handled by the) 198 404.67 B
0.52 0.11 (communications processor) 198 391.67 B
0.52 0.11 (\325) 319.19 391.67 B
0.52 0.11 (s own thread processor) 322.36 391.67 B
0.52 0.11 (, without direct intervention) 427.03 391.67 B
0.57 0.11 (by the main processor) 198 378.67 B
0.57 0.11 (.) 298.26 378.67 B
2 15 Q
-0.98 0.15 (Thread Processor) 54 345 B
3 11 Q
0.57 0.11 (One of the objectives of the Elan communications processor is to reduce the) 198 322.67 B
0.57 0.11 (number of interrupts and system calls that must be executed to perform mes-) 198 309.67 B
0.57 0.11 (sage passing. As we have seen the combination of the user mapped command) 198 296.67 B
0.23 0.11 (port and the Elan communication processor) 198 283.67 B
0.23 0.11 (\325) 395.64 283.67 B
0.23 0.11 (s security mechanisms allows user) 398.81 283.67 B
-0 0.11 (level code to initiate remote memory accesses without making a system call. In) 198 270.67 B
0.57 0.11 (many cases, however) 198 257.67 B
0.57 0.11 (, message protocols require higher level functions than) 294.57 257.67 B
0.57 0.11 (simply the transfer of data. Other common requirements are for synchronisa-) 198 244.67 B
0.28 0.11 (tion between processes executing on separate processors, and allocation of glo-) 198 231.67 B
0.57 0.11 (bal resources. T) 198 218.67 B
0.57 0.11 (o support these requirements the Elan communications) 270.08 218.67 B
0.57 0.11 (processor includes a RISC processor which can execute user level code inde-) 198 205.67 B
0.21 0.11 (pendently of the main node processor) 198 192.67 B
0.21 0.11 (, and also create additional network trans-) 367.83 192.67 B
0.11 (actions.) 198 179.67 S
FMENDPAGE
%%EndPage: "10" 15
%%Page: "11" 15
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (Elan Functionality) 90.28 108.7 S
3 9 Q
0.09 (1) 549.15 108.7 S
0.09 (1) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (3) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
3 11 Q
0 X
0.57 0.11 (The hardware and microcode of the thread processor support an extremely) 198 640.67 B
-0.11 0.11 (lightweight scheduling mechanism. This allows lightweight processes \050threads\051) 198 627.67 B
0.57 0.11 (running on the thread processor to be suspended and then rapidly rescheduled) 198 614.67 B
0.57 0.11 (by the hardware when the relevant event has occurred.) 198 601.67 B
0.55 0.11 (The user level code in the main node processor can directly request the execu-) 198 580.67 B
0.57 0.11 (tion of a thread process through access to the appropriate command port. The) 198 567.67 B
0.57 0.11 (thread code has no more privileges than the user code which initiated it. The) 198 554.67 B
0.57 0.11 (Elan communications processor uses its page tables for the relevant user con-) 198 541.67 B
0.57 0.11 (text whenever it makes a store access from the thread.) 198 528.67 B
2 14 Q
-0.91 0.14 (Thread code) 126 499.67 B
3 11 Q
0.57 0.11 (Thread code can be written in ANSI C. An inlined library provides access to) 198 477.67 B
0.57 0.11 (the Elan communication processor I/O instructions without the overhead even) 198 464.67 B
0.57 0.11 (of a subroutine call.) 198 451.67 B
2 14 Q
0.14 (Events) 126 422.67 S
3 11 Q
0.57 0.11 (Events provide a general mechanism by which synchronisation may be) 198 400.67 B
0.57 0.11 (achieved between lightweight threads running either in the same, or dif) 198 387.67 B
0.57 0.11 (ferent,) 524.46 387.67 B
0.57 0.11 (Elan communication processors. In addition an event can be used to cause an) 198 374.67 B
0.11 0.11 (interrupt to the main node processor) 198 361.67 B
0.11 0.11 (. An event is represented by a double word) 361.06 361.67 B
0.57 0.11 (in store.) 198 348.67 B
0.15 0.11 (A thread can perform the following operations on either local or remote events:) 198 327.67 B
0 F
0.11 (W) 198 298.67 S
0.11 (ait) 208.51 298.67 S
3 F
0.33 0.11 (If the event has already been set, then execution continues and the) 244 298.67 B
-0.04 0.11 (event is unset. Otherwise the thread is suspended on the event until) 244 285.67 B
0.57 0.11 (the event is set, when it will be rescheduled.) 244 272.67 B
0 F
0.11 (Set) 198 253.67 S
3 F
-0.04 0.11 (The event is set. If there was an action already present on the event) 244 253.67 B
0.57 0.11 (then it is performed.) 244 240.67 B
0 F
0.11 (Clear) 198 221.67 S
3 F
0.57 0.11 (If the event was set it is cleared.) 244 221.67 B
0 F
0.11 (T) 198 202.67 S
0.11 (est) 204.43 202.67 S
3 F
0.57 0.11 (Poll the status of an event without modifying or suspending on it.) 244 202.67 B
198 312 559 312 2 L
V
0.25 H
0 Z
N
198 197 559 197 2 L
V
N
FMENDPAGE
%%EndPage: "11" 16
%%Page: "12" 16
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (12) 54 108.7 S
3 10 Q
0.1 (S1002\32010M100.04) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (3) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
3 11 Q
0 X
0 K
0.19 0.11 (There are various possible actions which can occur when an event is triggered,) 198 640.67 B
0.57 0.11 (these depend on what has been suspended in the event structure:) 198 627.67 B
0.57 0.11 (Events also support queues of outstanding requests. When a queued event is) 198 520.67 B
0.28 0.11 (set, the \336rst action on the queue is executed, and the queue updated to point to) 198 507.67 B
0.57 0.11 (the next action.) 198 494.67 B
2 14 Q
-0.91 0.14 (Other Forms of Remote Access) 126 465.67 B
3 11 Q
-0.07 0.11 (In addition to events, the Elan also supports other forms of remote store access.) 198 443.67 B
0.57 0.11 (In particular thread code can generate network transactions to perform:) 198 430.67 B
0.57 0.11 (The broadcast capabilities of the Elite switch can be used to combine the re-) 198 187.67 B
0.57 0.11 (sults of a broadcast remote compare operation into a single result.) 198 174.67 B
0 F
0.57 0.11 (A local thr) 198 598.67 B
0.57 0.11 (ead) 250.26 598.67 B
3 F
0.57 0.11 (The thread is placed back on the thread run queue, so) 295.5 598.67 B
0.57 0.11 (will resume execution.) 295.5 585.67 B
0 F
0.57 0.11 (A r) 198 566.67 B
0.57 0.11 (emote thr) 214.28 566.67 B
0.57 0.11 (ead) 261.15 566.67 B
3 F
0.57 0.11 (The remote thread is rescheduled on its own processor) 295.5 566.67 B
0.57 0.11 (.) 544.8 566.67 B
0 F
0.57 0.11 (A local interrupt) 198 547.67 B
3 F
0.57 0.11 (The main processor is interrupted.) 295.5 547.67 B
0 F
0.57 0.11 (Atomic Swap) 198 401.67 B
3 F
0.57 0.11 (The word at the given remote address is returned,) 297.5 401.67 B
0.57 0.11 (and overwritten with the word sent in the message.) 297.5 388.67 B
0 F
0.57 0.11 (Atomic Add) 198 369.67 B
3 F
0.35 0.11 (The word sent in the message is atomically added to) 297.5 369.67 B
0.57 0.11 (the data at the remote address. The original remote) 297.5 356.67 B
0.57 0.11 (data may optionally be returned.) 297.5 343.67 B
0 F
0.57 0.11 (Atomic test) 198 324.67 B
0.57 0.11 (and stor) 198 311.67 B
0.57 0.11 (e) 238.06 311.67 B
3 F
0.57 0.11 (The word at the remote address is compared with a) 297.5 324.67 B
0.57 0.11 (test value sent in the message. If equal then a new) 297.5 311.67 B
0.57 0.11 (value sent in the message is written to the remote) 297.5 298.67 B
0.57 0.11 (store, otherwise the remote store is unchanged. The) 297.5 285.67 B
0.57 0.11 (original remote value may optionally be returned.) 297.5 272.67 B
0 F
0.57 0.11 (Remote compar) 198 253.67 B
0.57 0.11 (es) 274.64 253.67 B
3 F
0.04 0.11 (The word at the remote address is compared with the) 297.5 253.67 B
0.57 0.11 (given data using one of the operations ==, =, >= or) 297.5 240.67 B
0.57 0.11 (<. The result of the comparison is returned as an) 297.5 227.67 B
0.57 0.11 (acknowledge or negative acknowledge.) 297.5 214.67 B
198 612 561.33 612 2 L
V
0.25 H
0 Z
N
198 542 561.33 542 2 L
V
N
198 415 549.5 415 2 L
V
N
198 209 549.5 209 2 L
V
N
FMENDPAGE
%%EndPage: "12" 17
%%Page: "13" 17
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (13) 548.82 108.7 S
54 103.2 86.66 121.2 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.74 105.76 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
198 500.18 558 500.18 2 L
0.3 H
2 Z
0 X
0 K
N
185 83.74 393.76 101.24 R
7 X
V
55.01 522.61 558.36 589.36 C
0 72 612 720 C
2 18 Q
0 X
0 K
-2.07 -0.36 (Using the Communications Processor) 199.01 510.61 B
2 24 Q
(4) 545.14 510.61 T
3 11 Q
0.57 0.11 (In this section we show in outline how the communications processor is used) 198 459.01 B
0.05 0.11 (to communicate with other processes via the data network. The example shows) 198 446.01 B
0.57 0.11 (how to initiate a DMA transfer to remote store.) 198 433.01 B
2 15 Q
-0.98 0.15 (DMA T) 54 399.34 B
-0.98 0.15 (ransfers) 100.31 399.34 B
3 11 Q
0.57 0.11 (In the previous sections we have seen that a key factor in the design of the) 198 377.01 B
0.57 0.11 (communications processor is that it of) 198 364.01 B
0.57 0.11 (fers low communication start-up laten-) 372.58 364.01 B
0.57 0.11 (cies, and that communication start-up requires minimal intervention by the) 198 351.01 B
0.56 0.11 (main processor) 198 338.01 B
0.56 0.11 (. For a typical DMA transfer of data to a remote processor) 266.4 338.01 B
0.56 0.11 (, the) 534.52 338.01 B
0.57 0.11 (actions required by the main processor are as follows:) 198 325.01 B
0 14 Q
(\245) 198 304.01 T
3 11 Q
0.57 0.11 (User program creates a DMA structure in store identifying the) 210.6 304.01 B
0.57 0.11 (characteristics of the transfer \050source and destination addresses, amount of) 210.6 290.61 B
0.57 0.11 (data, etc\051. This could be done in advance if the same access is to be made) 210.6 277.21 B
0.11 (repeatedly) 210.6 263.81 S
0.11 (.) 256.8 263.81 S
0 14 Q
(\245) 198 242.41 T
3 11 Q
0.57 0.11 (User program issues DMA command with RmW to command port. The) 210.6 242.41 B
0.57 0.11 (address of the DMA structure is written to the appropriate address in the) 210.6 229.01 B
0.57 0.11 (command port.) 210.6 215.61 B
0 14 Q
(\245) 198 194.21 T
3 11 Q
0.13 0.11 (User program checks command accepted; a value of greater than or equal to) 210.6 194.21 B
0.57 0.11 (0 in the command port indicates that the command was accepted.) 210.6 180.81 B
FMENDPAGE
%%EndPage: "13" 18
%%Page: "14" 18
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (14) 54 108.7 S
3 10 Q
0.1 (S1002\32010M100.04) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (4) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
3 11 Q
0 X
0 K
0.57 0.11 (The main processor is now free to continue with its work leaving the commu-) 198 640.67 B
0.42 0.11 (nications processor to transfer the data, and to ensure its integrity) 198 627.67 B
0.42 0.11 (. The actions) 495.93 627.67 B
0.57 0.11 (now required by the communications processor are:) 198 614.67 B
0 14 Q
(\245) 198 593.67 T
3 11 Q
0.57 0.11 (Command processor reads the 32) 210.6 593.67 B
0.57 0.11 (bit data from the command port and uses) 363.85 593.67 B
0.57 0.11 (this to locate the DMA descriptor) 210.6 580.27 B
0.57 0.11 (. The descriptor is read into the) 364.05 580.27 B
0.57 0.11 (communications processors DMA queue.) 210.6 566.87 B
0 14 Q
(\245) 198 545.47 T
3 11 Q
0.57 0.11 (DMA processor reads the queue item in.) 210.6 545.47 B
0 14 Q
(\245) 198 524.07 T
3 11 Q
0.57 0.11 (DMA processor performs destination process translation.) 210.6 524.07 B
0 14 Q
(\245) 198 502.67 T
3 11 Q
0.57 0.11 (DMA processor reads route information.) 210.6 502.67 B
0 14 Q
(\245) 198 481.27 T
3 11 Q
0.57 0.11 (DMA processor reads source data in and starts to send. The route) 210.6 481.27 B
0.22 0.11 (information is prepended to the data, and is stripped of) 210.6 467.87 B
0.22 0.11 (f as it passes through) 459.33 467.87 B
0.57 0.11 (the switch network.) 210.6 454.47 B
0.05 0.11 (If the main processor wanted con\336rmation that a DMA had completed it would) 198 433.07 B
0.24 0.11 (include a pointer to an event in the DMA description. Polling this event \050when) 198 420.07 B
0.57 0.11 (there is no more useful work to do\051 would con\336rm completion of the transfer) 198 407.07 B
0.57 0.11 (.) 551.89 407.07 B
FMENDPAGE
%%EndPage: "14" 19
%%Page: "15" 19
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (15) 548.82 108.7 S
54 103.2 86.66 121.2 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.74 105.76 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
198 500.18 558 500.18 2 L
0.3 H
2 Z
0 X
0 K
N
185 83.74 393.76 101.24 R
7 X
V
55.01 522.61 558.36 589.36 C
0 72 612 720 C
2 18 Q
0 X
0 K
-2.07 -0.36 (Conclusions) 199.01 510.61 B
2 24 Q
(5) 545.14 510.61 T
3 11 Q
0.57 0.11 (Ef) 198 459.01 B
0.57 0.11 (\336cient inter) 208.41 459.01 B
0.57 0.11 (-processor communications requires the right balance of latency) 260.49 459.01 B
0.57 0.11 (and bandwidth. CS-2 uses Meiko\325) 198 446.01 B
0.57 0.11 (s own communication hardware, developed) 353.11 446.01 B
0.57 0.11 (from many years experience in the massively parallel processing \336eld, to cre-) 198 433.01 B
0.57 0.11 (ate a network with both high bandwidth and low start-up latency) 198 420.01 B
0.57 0.11 (.) 494.06 420.01 B
0.37 0.11 (The Elan communications processor is key to minimising the network latency) 198 399.01 B
0.37 0.11 (.) 551.91 399.01 B
0.57 0.11 (It serves not just as a communications co-processor) 198 386.01 B
0.57 0.11 (, but aims to minimise the) 433.55 386.01 B
0.53 0.11 (amount of message start up code, and therefore minimise start-up latency) 198 373.01 B
0.53 0.11 (. For) 532.76 373.01 B
0.44 0.11 (simple communications the overhead on the main processor can be reduced to) 198 360.01 B
0.03 0.11 (a single read modify write. More complex protocols require small fragments of) 198 347.01 B
0.36 0.11 (code to be run on the communications processor) 198 334.01 B
0.36 0.11 (. The requirement for copying) 417.89 334.01 B
0.57 0.11 (of messages is removed by the ability of the communications processor to op-) 198 321.01 B
0.41 0.11 (erate in virtual store. Protection is implemented by hardware table look ups of) 198 308.01 B
-0.11 0.11 (translation tables which impose low overhead on valid operations, and generate) 198 295.01 B
0.57 0.11 (exceptions in the much less frequent error cases.) 198 282.01 B
FMENDPAGE
%%EndPage: "15" 20
%%Page: "16" 20
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (16) 54 108.7 S
3 10 Q
0.1 (S1002\32010M100.04) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (5) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
FMENDPAGE
%%EndPage: "16" 21
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 20 1
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-BoldItalic
%%+ Times-Roman
%%+ Palatino-Italic
%%+ Palatino-Roman
%%+ Symbol
