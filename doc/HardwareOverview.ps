%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%%BeginProlog
%
% FrameMaker postscript_prolog 3.0, for use with FrameMaker 3.0
% This postscript_prolog file is Copyright (c) 1986-1991 Frame Technology
% Corporation.  All rights reserved.  This postscript_prolog file may be
% freely copied and distributed in conjunction with documents created using
% FrameMaker.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 

% Set up Color vs. Black-and-White

/FMPrintInColor false def
/colorimage where { pop
    /currentcolortransfer where { pop
	/FMPrintInColor true def
	statusdict begin 
	    /processcolors where { 
		pop processcolors 1 le {
		    /FMPrintInColor false def
		} if
	    }{
		/deviceinfo where {
		    pop deviceinfo /Colors known { 
			deviceinfo /Colors get 1 le {
			    /FMPrintInColor false def
			} if
		    } if
		} if
	    } ifelse
	end
	/currentcanvas where {  % NeWSprint?
	    pop systemdict /separationdict known not {
		/FMPrintInColor false def
	    } if
	} if
    } if
} if


% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def

/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 17 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-BoldItalic FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Palatino-Italic FMFONTDEFINE
5 0 /Palatino-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
185 83.74 393.76 101.24 R
7 X
0 K
V
54 630 573 702 C
54 630 573 702 R
7 X
0 K
V
0 72 612 720 C
0 32 Q
0 X
0 K
8 (C) 58.19 676.66 S
1 27 Q
6.75 (omputing) 89.29 676.66 S
0 32 Q
8 (S) 82.98 645.61 S
1 27 Q
6.75 (urface) 108.77 645.61 S
56 670.94 560 670.94 2 L
0.5 H
2 Z
N
414.67 95.67 567.17 156.17 C
414.67 95.67 567.17 156.17 R
7 X
0 K
V
0 -322.62 -285.88 229.38 1.12 552 287 440.67 105.83 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
53 528.25 549 595 C
0 72 612 720 C
2 25 Q
0 X
0 K
(CS-2 Hardware Overview) 53 511.58 T
56.42 105.83 155.58 121.17 R
7 X
V
0 10 Q
0 X
(S1002\32010M141.00) 56.42 114.5 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
184.97 83.74 393.7 101.23 R
7 X
0 K
V
3 11 Q
0 X
-0.09 0.11 (The information supplied in this document is believed to be true but no liability is assumed for its use or for the) 54 640.67 B
-0.57 0.11 (infringements of the rights of others resulting from its use. No licence or other rights are granted in respect of any) 54 627.67 B
0.11 (rights owned by any of the or) 54 614.67 S
0.11 (ganisations mentioned herein.) 186.53 614.67 S
0.11 (This document may not be copied, in whole or in part, without the prior written consent of Meiko W) 54 595.67 S
0.11 (orld Incor-) 506.29 595.67 S
0.11 (porated.) 54 582.67 S
0.11 (\251 copyright 1995 Meiko W) 54 563.67 S
0.11 (orld Incorporated.) 178.39 563.67 S
0.11 (The speci\336cations listed in this document are subject to change without notice.) 54 544.67 S
-0.6 0.11 (Meiko, CS-2, Computing Surface, and CST) 54 525.67 B
-0.6 0.11 (ools are trademarks of Meiko Limited. Sun, Sun and a numeric suf) 247.04 525.67 B
-0.6 0.11 (\336x,) 540.93 525.67 B
0.11 (Solaris, SunOS, AnswerBook, NFS, XV) 54 512.67 S
0.11 (iew) 235.02 512.67 S
0.11 (, and OpenW) 250.52 512.67 S
0.11 (indows are trademarks of Sun Microsystems, Inc. All) 309.64 512.67 S
-0.17 0.11 (SP) 54 499.67 B
-0.17 0.11 (ARC trademarks are trademarks or registered trademarks of SP) 65.44 499.67 B
-0.17 0.11 (ARC International, Inc. Unix, Unix System V) 348.23 499.67 B
-0.17 0.11 (,) 552.45 499.67 B
0.11 (and OpenLook are registered trademarks of Unix System Laboratories, Inc. The X W) 54 486.67 S
0.11 (indows System is a trade-) 438.09 486.67 S
-0.45 0.11 (mark of the Massachusetts Institute of T) 54 473.67 B
-0.45 0.11 (echnology) 232.11 473.67 B
-0.45 0.11 (. A) 278.21 473.67 B
-0.45 0.11 (VS is a trademark of Advanced V) 290.11 473.67 B
-0.45 0.11 (isual Systems Inc. V) 439.21 473.67 B
-0.45 0.11 (erilog) 529.27 473.67 B
0.11 (is a registered trademark of Cadence Design Systems, Inc. All other trademarks are acknowledged.) 54 460.67 S
0.11 (Circulation Control:) 54 192.67 S
4 F
0.11 (External) 151.67 192.67 S
0 F
(Meiko\325) 126 418.67 T
(s addr) 159.2 418.67 T
(ess in the US is:) 188.65 418.67 T
(Meiko) 126 392.67 T
(130 Baker A) 126 379.67 T
(venue) 183.85 379.67 T
(Concord MA01742) 126 366.67 T
(508 371 0088) 126 340.67 T
(Fax: 508 371 7516) 126 327.67 T
(Meiko\325) 306 418.67 T
(s addr) 339.2 418.67 T
(ess in the UK is:) 368.64 418.67 T
(Meiko Limited) 306 392.67 T
(650 Aztec W) 306 379.67 T
(est) 364.65 379.67 T
(Bristol) 306 366.67 T
(BS12 4SD) 306 353.67 T
(T) 306 327.67 T
(el: 01454 616171) 312.33 327.67 T
(Fax: 01454 618188) 306 314.67 T
3 F
(Issue Status:) 60 264.67 T
(Draft) 133.78 264.67 T
(Preliminary) 133.78 249.67 T
(Release) 133.78 234.67 T
(x) 201.06 234.67 T
(Obsolete) 133.78 219.67 T
195 244 214.25 258.75 R
0.5 H
2 Z
N
195 229 214.25 243.75 R
N
195 259 214.25 273.75 R
N
195 214 214.25 228.75 R
N
FMENDPAGE
%%EndPage: "2" 3
%%Page: "i" 3
612 792 0 FMBEGINPAGE
5 9 Q
0 X
0 K
0.09 (i) 555.29 108.7 S
197 482 558 482 2 L
0.5 H
2 Z
N
4 20 Q
(Contents) 198 489 T
185 83.74 393.76 101.24 R
7 X
V
0 14 Q
0 X
0.14 (1.) 198 457.01 S
0.14 (Hardwar) 234 457.01 S
0.14 (e Overview) 289.94 457.01 S
0.14 ( . . . . . . . . . . . . . . . . . . . . . . .) 360.35 457.01 S
0.14 (1) 550.86 457.01 S
3 11 Q
0.11 (CS-2 Bays) 270 435.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 320.31 435.01 S
0.11 (2) 552.39 435.01 S
0.11 (CS-2 Modules) 270 420.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 337.47 420.01 S
0.11 (3) 552.39 420.01 S
0.11 (Processor Boards) 270 405.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 348.91 405.01 S
0.11 (4) 552.39 405.01 S
0.11 (Network Switch Boards) 270 390.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . .) 380.37 390.01 S
0.11 (5) 552.39 390.01 S
0.11 (I/O Devices) 270 375.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 326.03 375.01 S
0.11 (5) 552.39 375.01 S
0.11 (The CS-2 Data Network) 270 360.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . .) 380.37 360.01 S
0.11 (6) 552.39 360.01 S
0.11 (The Control and Diagnostics Network) 270 345.01 S
0.11 ( . . . . . . . . . . . . . . .) 443.29 345.01 S
0.11 (7) 552.39 345.01 S
FMENDPAGE
%%EndPage: "i" 4
%%Page: "ii" 4
612 792 0 FMBEGINPAGE
5 9 Q
0 X
0 K
0.09 (ii) 54 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
FMENDPAGE
%%EndPage: "ii" 5
%%Page: "1" 5
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (1) 553.41 108.7 S
54 103.2 86.66 121.2 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.74 105.76 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
198 500.18 558 500.18 2 L
0.3 H
2 Z
0 X
0 K
N
185 83.74 393.76 101.24 R
7 X
V
55.01 522.61 558.36 589.36 C
0 72 612 720 C
2 18 Q
0 X
0 K
0.18 (Hardware Overview) 199.01 510.61 S
2 24 Q
0.24 (1) 544.9 510.61 S
3 11 Q
0.11 (The CS-2 consists of the following key hardware components:) 198 459.01 S
0 14 Q
(\245) 198 438.01 T
3 11 Q
0.11 (The Bay) 210.6 438.01 S
0.11 (.) 248.23 438.01 S
0 14 Q
(\245) 198 416.61 T
3 11 Q
0.11 (The Modules.) 210.6 416.61 S
0 14 Q
(\245) 198 395.21 T
3 11 Q
0.11 (Processor Boards.) 210.6 395.21 S
0 14 Q
(\245) 198 373.81 T
3 11 Q
0.11 (Network Switch Boards.) 210.6 373.81 S
0 14 Q
(\245) 198 352.41 T
3 11 Q
0.11 (I/O Devices) 210.6 352.41 S
0 14 Q
(\245) 198 331.01 T
3 11 Q
0.11 (The CS-2 data network.) 210.6 331.01 S
0 14 Q
(\245) 198 309.61 T
3 11 Q
0.11 (The CS-2 control and diagnostic network.) 210.6 309.61 S
0.11 (This document provides a brief overview of these components and includes) 198 288.21 S
0.11 (pointers to more detailed information in your CS-2 documentation set.) 198 275.21 S
FMENDPAGE
%%EndPage: "1" 6
%%Page: "2" 6
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (2) 54 108.7 S
3 10 Q
0.1 (S1002\32010M141.00) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
2 15 Q
0 X
0 K
0.15 (CS-2 Bays) 54 638 S
3 11 Q
0.11 (The Bay provides the physical infrastructure for the modules; it provides the) 198 615.67 S
-0.26 0.11 (power distribution, cabling for the data and control networks, ducting to maxim-) 198 602.67 B
0.11 (ise the \337ow of cooling air through the modules, and a \336rm and level securing) 198 589.67 S
0.11 (point for the modules.) 198 576.67 S
-0.24 0.11 (The Bay is a scalable tubular structure which can be adapted to suit a number of) 198 555.67 B
-0.27 0.11 (machine con\336gurations, from the 4 module Half Bay system to the 24 module 3-) 198 542.67 B
0.11 (Bay system. Lar) 198 529.67 S
0.11 (ger systems are con\336gured as a number of interconnected bays.) 271.25 529.67 S
0 F
0.11 (Figur) 198 508.67 S
0.11 (e 1-1) 224.63 508.67 S
0.11 (A Half Bay System) 261 508.67 S
0.11 (Figur) 198 376.17 S
0.11 (e 1-2) 224.63 376.17 S
0.11 (A Single Bay System) 261 376.17 S
54 144 558 648 C
197.99 398.5 558 505 C
0 11.5 8 274.5 209 131.5 100.5 312.24 401.5 FMBEGINEPSF
%%BeginDocument: /tmp_mnt/home/release/MEIKOcs2-1-4/cs2docs/HardwareOverview/Art/CS2-0.5bay.art
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (CS2-0.5iibay.art)
%%CreationDate: (18/8/93) (4:27 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%CMYKCustomColor: 0 0 0 1 (Custom Color 0)
%%+ 0 0 0 1 (Custom Color 1)
%%+ 0 0 0 0 (Custom Color 2)
%%+ 0 0 0 0 (Custom Color 3)
%%BoundingBox:11.5 8 274.5 209
%%TemplateBox:260.5 245 260.5 245
%%TileBox:-538 781 0 1562
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 R
0 G
0 i 0 J 0 j 0.9 w 4 M []0 d
%%Note:
19.599 138.897 m
19.599 47.998 l
37.599 41.698 l
37.599 152.397 l
19.599 138.897 l
s
42.999 67.798 m
42.999 41.698 l
97.899 22.798 l
97.899 61.498 l
42.999 67.798 l
s
42.999 160.047 m
49.299 160.497 l
49.299 74.998 l
42.999 75.448 l
42.999 160.047 l
s
49.299 160.497 m
107.799 205.497 l
107.799 72.298 l
49.299 74.998 l
49.299 160.497 l
s
107.799 205.497 m
264.398 178.497 l
264.398 73.198 l
107.799 72.298 l
107.799 205.497 l
s
227.498 184.797 m
227.498 73.198 l
S
189.698 191.097 m
189.698 73.198 l
S
149.199 198.297 m
149.199 72.748 l
S
59.649 168.597 m
43.449 167.697 l
15.099 145.197 l
15.099 43.999 l
100.5 12 l
102.349 10.998 104.599 11.498 v
263.898 26.898 l
267.25 28.25 267.25 30.25 v
S
103.299 66.898 m
103.299 15.598 l
S
97.899 61.498 m
96.774 72.298 103.974 72.298 v
S
43.224 71.623 m
95.199 67.798 l
S
42.549 36.748 m
96.099 18.298 l
S
40.299 160.497 m
18.699 143.397 l
S
104.199 66.898 m
268.448 69.598 l
S
107.349 19.198 m
267.548 33.598 l
S
103.749 66.898 m
106.899 67.348 107.349 63.298 v
123.999 63.748 l
S
2 J 2 M
111.551 22.974 m
111.551 34.191 111.775 51.113 111.514 60.366 C
S
111.849 60.598 m
267.616 63.919 L
267.579 35.851 L
111.776 23.011 L
S
0 J 4 M
107.349 63.748 m
107.349 20.098 l
107.349 16.948 103.749 15.598 v
S
119.499 63.748 m
269.798 66.898 l
269.348 67.348 270.248 64.648 v
270.248 34.948 l
271.062 30.979 266.648 29.998 v
103.299 15.598 l
S
264.848 73.198 m
270.248 69.598 270.248 65.098 v
S
113.874 57.898 m
265.748 61.498 l
S
113.874 54.973 m
265.748 59.698 l
S
113.874 52.048 m
265.748 57.898 l
S
113.874 49.348 m
265.748 55.648 l
S
113.874 46.423 m
265.523 53.398 l
S
113.874 43.273 m
265.298 50.923 l
S
113.874 40.123 m
265.748 48.223 l
S
114.099 36.748 m
265.523 45.523 l
S
113.874 33.373 m
265.523 42.823 l
S
113.874 29.998 m
265.748 40.348 l
S
113.874 26.398 m
265.748 37.873 l
S
0 O
0 g
264.398 84.448 m
107.799 86.248 l
107.799 98.398 l
264.398 93.448 l
264.398 84.448 l
f
0 R
1 G
149.199 97.048 m
149.199 85.798 l
S
189.698 95.698 m
189.698 85.348 l
S
227.498 94.798 m
227.498 84.898 l
S
%%Trailer
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
54 144 558 648 C
0 72 612 720 C
54 144 558 648 C
199.38 166.41 558 372.5 C
0 11.5 9 350 500 137.09 198.85 310.15 170.71 FMBEGINEPSF
%%BeginDocument: /tmp_mnt/home/release/MEIKOcs2-1-4/cs2docs/HardwareOverview/Art/CS2-1bay.art
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (CS2-1bay.art)
%%CreationDate: (3/8/93) (4:24 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%CMYKCustomColor: 0 0 0 1 (Custom Color 0)
%%+ 0 0 0 1 (Custom Color 1)
%%+ 0 0 0 0 (Custom Color 2)
%%+ 0 0 0 0 (Custom Color 3)
%%BoundingBox:11.5 9 350 500
%%TemplateBox:260.5 245 260.5 245
%%TileBox:-538 781 0 1562
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 R
0 G
0 i 0 J 0 j 0.9 w 4 M []0 d
%%Note:
103.6368 201.6612 m
103.7493 72.8495 l
109.5993 73.9745 l
S
19.5999 328.8978 m
19.5999 237.9984 l
37.5998 231.6985 l
37.5998 342.3977 l
19.5999 328.8978 l
s
19.5999 231.6985 m
37.5998 224.4985 l
37.5998 108.3993 l
19.5999 132.6991 l
19.5999 231.6985 l
s
42.9997 257.7983 m
42.9997 231.6985 l
97.8993 212.7986 l
97.8993 251.4983 l
42.9997 257.7983 l
s
43.8997 221.7985 m
96.9994 202.8986 l
96.9994 74.1995 l
43.8997 129.9991 l
43.8997 221.7985 l
s
43.8997 123.6992 m
43.8997 101.1993 l
96.0994 31.8998 l
96.0994 66.9996 l
43.8997 123.6992 l
s
42.9997 350.0476 m
49.2997 350.4976 l
49.2997 264.9982 l
42.9997 265.4482 l
42.9997 350.0476 l
s
49.2997 350.4976 m
107.7993 395.4973 l
107.7993 262.2982 l
49.2997 264.9982 l
49.2997 350.4976 l
s
107.7993 395.4973 m
264.3982 368.4975 l
264.3982 263.1982 l
107.7993 262.2982 l
107.7993 395.4973 l
s
227.4985 374.7975 m
227.4985 263.1982 l
S
189.6987 381.0974 m
189.6987 263.1982 l
S
149.199 388.2974 m
149.199 262.7482 l
S
108.9243 201.9987 m
146.499 205.5986 l
185.1988 191.6487 l
185.1988 55.2996 l
146.499 43.5997 l
108.9243 74.8745 l
108.9243 201.9987 l
s
146.949 186.4738 m
146.949 44.0497 l
S
60.0996 215.4986 m
60.0996 122.7992 l
96.9994 85.8994 l
S
48.3997 219.9985 m
48.3997 131.7991 l
60.0996 133.5991 l
S
219.8485 100.2993 m
185.6488 92.1994 l
S
103.7493 63.6246 m
103.7493 12.9999 l
15.0999 129.9991 l
15.0999 335.1977 l
43.4497 357.6976 l
59.6496 358.5976 l
S
107.7993 16.5999 m
264.8482 66.9996 l
S
117.0242 67.4496 m
103.7493 63.8496 l
107.3493 64.7496 107.7993 60.6996 v
120.3992 64.2996 l
S
2 J 2 M
111.1013 21.2754 m
111.1013 32.0726 111.3282 48.2005 111.0644 57.5424 C
112.9886 58.4172 123.1883 60.5169 125.1998 61.0416 C
S
265.6789 70.1396 m
265.4665 78.7994 265.642 91.0096 265.8166 100.0203 C
185.8738 77.5745 l
S
265.5547 69.7022 m
111.3264 21.5382 L
S
0 J 4 M
263.9482 102.9993 m
185.6488 81.8495 l
S
103.2993 256.8983 m
103.2993 205.5986 l
S
185.4238 85.2244 m
257.1983 103.8993 l
268.4482 108.3993 268.8982 98.4994 v
268.8982 69.2496 l
269.3482 67.4496 265.7482 64.2996 v
104.1993 12.5499 l
107.7993 13.8999 107.7993 17.0499 y
107.7993 61.1496 l
S
97.8993 251.4983 m
96.7744 262.2982 103.9743 262.2982 v
S
43.2247 261.6232 m
95.1994 257.7983 l
S
42.5497 226.7485 m
96.0994 208.2986 l
S
40.2997 350.4976 m
18.6999 333.3978 l
S
100.5993 21.9999 m
100.5993 67.8996 l
S
104.1993 256.8983 m
268.4482 259.5983 l
S
263.9482 216.3986 m
263.9482 111.5493 l
219.8485 100.2993 l
S
107.3493 209.1986 m
267.5482 223.5985 l
S
103.7493 256.8983 m
106.8993 257.3483 107.3493 253.2983 v
123.9992 253.7483 l
S
2 J 2 M
111.5513 212.9741 m
111.5513 224.1916 111.7754 241.1133 111.5144 250.3661 C
S
111.8493 250.5983 m
267.6166 253.9193 L
267.5797 225.8512 L
111.7763 213.0119 L
S
260.7982 104.7993 m
269.5966 106.9989 268.8982 112.4493 y
268.8982 220.8985 l
S
0 J 4 M
107.3493 253.7483 m
107.3493 210.0986 l
107.3493 206.9486 103.7493 205.5986 v
S
109.5993 201.9987 m
264.3982 216.3986 l
S
119.4992 253.7483 m
269.7982 256.8983 l
269.3482 257.3483 270.2482 254.6483 v
270.2482 224.9485 l
271.0627 220.9795 266.6482 219.9985 v
103.2993 205.5986 l
S
227.4985 213.2486 m
227.4985 102.5493 l
S
189.6987 209.1986 m
189.6987 93.0994 l
S
264.8482 263.1982 m
270.2482 259.5983 270.2482 255.0983 v
S
113.8742 247.8983 m
265.7482 251.4983 l
S
113.8742 244.9734 m
265.7482 249.6983 l
S
113.8742 242.0484 m
265.7482 247.8983 l
S
113.8742 239.3484 m
265.7482 245.6484 l
S
113.8742 236.4234 m
265.5232 243.3984 l
S
113.8742 233.2734 m
265.2982 240.9234 l
S
113.8742 230.1235 m
265.7482 238.2234 l
S
114.0992 226.7485 m
265.5232 235.5234 l
S
113.8742 223.3735 m
265.5232 232.8234 l
S
113.8742 219.9985 m
265.7482 230.3485 l
S
113.8742 216.3986 m
265.7482 227.8735 l
S
185.6488 75.5495 m
263.4982 97.3744 l
S
263.4982 95.1244 m
185.4238 73.0745 l
S
263.4982 92.6494 m
185.4238 70.3745 l
S
263.4982 89.7244 m
185.1988 67.4496 l
S
263.4982 86.7994 m
185.6488 64.7496 l
S
263.4982 84.0995 m
185.1988 62.0496 l
S
263.7232 81.3995 m
185.6488 59.3496 l
S
263.4982 78.6995 m
185.6488 56.1996 l
S
113.8742 31.4498 m
263.4982 75.9995 l
S
113.8742 28.2998 m
263.7232 73.9745 l
S
113.8742 25.1499 m
263.4982 71.4995 l
S
127.5991 59.1246 m
113.8742 55.2996 l
S
129.8491 57.0996 m
113.8742 52.3747 l
S
132.5491 55.0746 m
113.8742 49.2247 l
S
135.2491 52.8247 m
113.6492 46.0747 l
S
137.2741 50.3497 m
113.8742 43.1497 l
S
140.4241 48.7747 m
113.8742 40.2247 l
S
142.449 46.5247 m
113.8742 37.2998 l
S
145.599 44.2747 m
114.0992 34.3748 l
S
51.0997 219.0985 m
51.0997 134.0491 l
S
53.7996 218.1985 m
53.7996 134.4991 l
S
56.0496 217.2985 m
56.0496 134.9491 l
S
58.2996 216.3986 m
58.2996 135.3991 l
S
0 O
0 g
264.3982 274.4482 m
107.7993 276.2481 l
107.7993 288.3981 l
264.3982 283.4481 l
264.3982 274.4482 l
f
146.499 172.7489 m
185.1988 178.1488 l
185.1988 165.5489 l
146.949 159.2489 l
F
263.9482 196.1487 m
263.9482 205.1486 l
F
0 A
u
0 R
0 G
185.1988 191.6487 m
146.499 187.1488 l
109.1493 201.7736 l
S
U
0 O
0 g
263.9482 204.6986 m
178.4488 194.7987 l
186.0988 192.0987 l
186.0988 183.9988 l
263.9482 194.3487 l
263.9482 204.6986 l
f
0 R
0 G
263.9482 207.3986 m
263.9482 189.3987 l
S
1 G
227.4985 200.1987 m
227.4985 189.3987 l
S
189.6987 195.6987 m
189.6987 184.4488 l
S
149.199 287.0481 m
149.199 275.7982 l
S
189.6987 285.6981 m
189.6987 275.3482 l
S
227.4985 284.7981 m
227.4985 274.8982 l
S
177.9988 194.7987 m
186.0988 192.0987 l
186.0988 183.9988 l
S
%%Trailer
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
3 11 Q
0 X
0 K
(Rear section contains module) 215 346.99 T
(interconnect and power) 215 335.99 T
(distribution) 215 324.99 T
(Air intake for upper modules) 426.67 316.99 T
(\050exhaust is direct from the) 426.67 305.99 T
(top of each module\051) 426.67 294.99 T
(Air intake for lower modules) 426.67 251.16 T
(\050exhaust is directed to the) 426.67 240.16 T
(Each module is) 215 250.32 T
(mounted on a) 215 239.32 T
(sliding tray to ease) 215 228.32 T
(installation) 215 217.32 T
308.62 301.59 315.83 291.99 304.64 296.31 306.63 298.95 4 Y
V
269.17 326.99 306.63 298.95 2 L
0.5 H
2 Z
N
328.1 231.08 340 229.49 329.07 224.54 328.59 227.81 4 Y
V
271.67 219.49 328.59 227.81 2 L
N
434.26 274.34 422.49 271.99 431.23 280.22 432.74 277.28 4 Y
V
461.67 291.99 432.76 277.27 2 L
N
(rear of the bay\051.) 426.67 229.16 T
429.87 205.26 418.32 202 426.39 210.89 428.13 208.08 4 Y
V
455 224.49 428.14 208.07 2 L
N
54 144 558 648 C
0 72 612 720 C
FMENDPAGE
%%EndPage: "2" 7
%%Page: "3" 7
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (Hardware Overview) 90.28 108.7 S
3 9 Q
0.09 (3) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (1) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
0 11 Q
0 X
0.11 (Figur) 198 640.67 S
0.11 (e 1-3) 224.63 640.67 S
0.11 (A Thr) 261 640.67 S
0.11 (ee Bay System \050also r) 290.38 640.67 S
0.11 (eferr) 392.08 640.67 S
0.11 (ed to as a Cluster\051) 415.64 640.67 S
2 15 Q
0.15 (CS-2 Modules) 54 407.51 S
3 11 Q
-0.08 0.11 (There are currently three types of module that can be \336tted into a Bay: the Proc-) 198 385.17 B
0.11 (essor Module, containing processor boards and a number of SCSI disk devices,) 198 372.17 S
-0.74 0.11 (the Switch Module, containing switching components for the CS-2 data network,) 198 359.17 B
0.11 (and the Peripheral Module, which contains an array of SCSI disk devices.) 198 346.17 S
0.11 (All modules include cooling fans, power supplies, and a dedicated module con-) 198 325.17 S
-0.59 0.11 (troller processor which is the module\325) 198 312.17 B
-0.59 0.11 (s interface to the CS-2 control and diagnos-) 365.74 312.17 B
0.11 (tics network. A printed circuit board within each module \321 the module\325) 198 299.17 S
0.11 (s) 524.05 299.17 S
0.11 (backplane board \321 distributes the power and control signals to the module\325) 198 286.17 S
0.11 (s) 539.46 286.17 S
0.11 (contents, and also carries the data buses to the module\325) 198 273.17 S
0.11 (s rear connectors. Most) 445.51 273.17 S
-0.48 0.11 (connections from the module to the Bay are via Beta Flex connections which are) 198 260.17 B
0.11 (\336xed to the Bay at each module\325) 198 247.17 S
0.11 (s mounting position; these are zero insertion) 343.78 247.17 S
0.11 (force connectors that open and close \050thus gripping the module\325) 198 234.17 S
0.11 (s connections\051) 485.07 234.17 S
0.11 (under the control of an electric current.) 198 221.17 S
0.11 (More information about the modules can be found in:) 198 200.17 S
0 14 Q
(\245) 198 179.17 T
1 11 Q
0.11 (The CS-2 Pr) 210.6 179.17 S
0.11 (ocessor Module) 266.4 179.17 S
3 F
0.11 (, Meiko document S1002\32010M128.) 337.9 179.17 S
0 14 Q
(\245) 198 157.77 T
1 11 Q
0.11 (The CS-2 Switch Module) 210.6 157.77 S
3 F
0.11 (, Meiko document S1002\32010M132.) 322.71 157.77 S
54 144 558 648 C
199.49 436.51 558 637 C
0 9.5 15 499.5 404 245 194.5 256.25 439.5 FMBEGINEPSF
%%BeginDocument: /tmp_mnt/home/release/MEIKOcs2-1-4/cs2docs/HardwareOverview/Art/CS2-3bay.art
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (CS2-3bay.art)
%%CreationDate: (20/8/93) (1:49 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%CMYKCustomColor: 0 0 0 1 (Custom Color 0)
%%+ 0 0 0 1 (Custom Color 1)
%%+ 0 0 0 0 (Custom Color 2)
%%+ 0 0 0 0 (Custom Color 3)
%%BoundingBox:9.5 15 499.5 404
%%TemplateBox:260.5 245 260.5 245
%%TileBox:-538 781 0 1562
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 R
0 G
0 i 0 J 0 j 0.9 w 4 M []0 d
%%Note:
101.636 207.261 m
100.849 79.799 l
107.599 79.574 l
S
17.599 334.497 m
17.599 243.598 l
35.599 237.298 l
35.599 347.997 l
17.599 334.497 l
s
17.599 237.298 m
35.599 230.098 l
35.599 113.999 l
17.599 138.299 l
17.599 237.298 l
s
40.999 263.398 m
40.999 237.298 l
95.899 218.398 l
95.899 257.098 l
40.999 263.398 l
s
41.899 227.398 m
94.999 208.498 l
94.999 79.799 l
41.899 135.599 l
41.899 227.398 l
s
41.899 129.299 m
41.899 106.799 l
94.099 37.499 l
94.099 72.599 l
41.899 129.299 l
s
40.999 355.647 m
47.299 356.097 l
47.299 270.598 l
40.999 271.048 l
40.999 355.647 l
s
47.299 356.097 m
105.799 401.097 l
105.799 267.898 l
47.299 270.598 l
47.299 356.097 l
s
105.799 401.097 m
262.398 374.097 l
262.398 268.798 l
105.799 267.898 l
105.799 401.097 l
s
225.498 380.397 m
225.498 268.798 l
S
187.698 386.697 m
187.698 268.798 l
S
147.199 393.897 m
147.199 268.348 l
S
106.924 207.598 m
144.499 211.198 l
183.198 197.248 l
183.198 60.899 l
144.499 49.199 l
106.924 80.474 l
106.924 207.598 l
s
144.949 192.073 m
144.949 49.649 l
S
58.099 221.098 m
58.099 128.399 l
94.999 91.499 l
S
46.399 225.598 m
46.399 137.399 l
58.099 139.199 l
S
217.848 105.899 m
183.648 97.799 l
S
101.749 69.224 m
101.749 18.6 l
13.099 135.599 l
13.099 340.797 l
41.449 363.297 l
57.649 364.197 l
S
105.799 22.199 m
270.498 74.849 l
S
115.024 73.049 m
101.749 69.449 l
105.349 70.349 105.799 66.299 v
118.399 69.899 l
S
2 J 2 M
109.101 26.875 m
109.101 37.672 109.328 53.8 109.064 63.142 C
110.988 64.017 121.188 66.116 123.199 66.641 C
S
272.228 77.989 m
272.016 86.649 272.191 99.309 272.366 108.32 C
183.873 83.174 l
S
271.654 77.552 m
109.326 27.138 L
S
0 J 4 M
269.598 110.399 m
183.648 87.449 l
S
101.299 262.498 m
101.299 211.198 l
S
183.423 90.824 m
263.748 112.199 l
274.998 116.699 275.448 106.799 v
275.448 77.549 l
S
272.298 72.599 m
102.199 18.15 l
105.799 19.5 105.799 22.649 y
105.799 66.749 l
S
95.899 257.098 m
94.774 267.898 101.974 267.898 v
S
41.224 267.223 m
93.199 263.398 l
S
40.549 232.348 m
94.099 213.898 l
S
38.299 356.097 m
16.699 338.997 l
S
98.599 27.599 m
98.599 73.499 l
S
102.199 262.498 m
262.398 265.198 l
268.248 264.748 268.248 260.248 v
268.248 230.548 l
269.058 226.378 265.548 225.598 v
101.299 211.198 l
S
105.349 214.798 m
265.098 228.298 l
S
101.749 262.498 m
104.899 262.948 105.349 258.898 v
121.999 259.348 l
S
2 J 2 M
109.551 218.574 m
109.551 229.791 109.775 246.713 109.514 255.966 C
S
109.849 256.198 m
265.616 259.519 L
265.579 231.451 L
109.776 218.611 L
S
0 J 4 M
105.349 259.348 m
105.349 215.698 l
105.349 212.548 101.749 211.198 v
S
107.599 207.598 m
270.048 222.448 l
S
117.499 259.348 m
264.198 262.048 l
S
228.198 217.948 m
228.198 109.949 l
S
189.498 214.798 m
189.498 99.599 l
S
111.874 253.498 m
263.748 257.098 l
S
111.874 250.573 m
263.748 255.298 l
S
111.874 247.648 m
263.748 253.498 l
S
111.874 244.948 m
263.748 251.248 l
S
111.874 242.023 m
263.523 248.998 l
S
111.874 238.873 m
263.298 246.523 l
S
111.874 235.723 m
263.748 243.823 l
S
112.099 232.348 m
263.523 241.123 l
S
111.874 228.973 m
263.523 238.423 l
S
111.874 225.598 m
263.748 235.948 l
S
111.874 221.998 m
263.748 233.473 l
S
183.648 81.149 m
270.048 105.674 l
S
270.048 103.424 m
183.423 78.674 l
S
270.048 100.949 m
183.423 75.974 l
S
270.048 98.024 m
183.198 73.049 l
S
270.048 95.099 m
183.648 70.349 l
S
270.048 92.399 m
183.198 67.649 l
S
270.273 89.699 m
183.648 64.949 l
S
270.048 86.999 m
183.648 61.799 l
S
111.874 37.049 m
270.048 84.299 l
S
111.874 33.899 m
270.273 82.274 l
S
111.874 30.749 m
270.048 79.799 l
S
125.599 64.724 m
111.874 60.899 l
S
127.849 62.699 m
111.874 57.974 l
S
130.549 60.674 m
111.874 54.824 l
S
133.249 58.424 m
111.649 51.674 l
S
135.274 55.949 m
111.874 48.749 l
S
138.424 54.374 m
111.874 45.824 l
S
140.449 52.124 m
111.874 42.899 l
S
143.599 49.874 m
112.099 39.974 l
S
49.099 224.698 m
49.099 139.649 l
S
51.799 223.798 m
51.799 140.099 l
S
54.049 222.898 m
54.049 140.549 l
S
56.299 221.998 m
56.299 140.999 l
S
0 O
0 g
262.398 280.048 m
105.799 281.848 l
105.799 293.998 l
262.398 289.048 l
262.398 280.048 l
f
144.499 178.348 m
183.198 183.748 l
183.198 171.148 l
144.949 164.849 l
F
0 A
u
0 R
0 G
183.198 197.248 m
144.499 192.748 l
107.149 207.373 l
S
U
0 O
0 g
264.198 210.298 m
176.448 200.398 l
184.098 197.698 l
184.098 189.598 l
264.648 199.948 l
F
0 R
1 G
147.199 292.648 m
147.199 281.398 l
S
187.698 291.298 m
187.698 280.948 l
S
225.498 290.398 m
225.498 280.498 l
S
175.998 200.398 m
184.098 197.698 l
184.098 189.598 l
S
0 G
262.507 374.303 m
392.104 351.609 l
392.104 270.344 l
262.507 268.725 l
262.507 374.303 l
s
362.627 356.867 m
362.627 270.344 l
S
332.431 361.899 m
332.431 270.344 l
S
300.078 367.651 m
300.078 269.984 l
S
355.629 140.416 m
265.579 118.26 l
S
278.655 115.568 m
269.663 113.663 l
S
2 J 2 M
278.091 80.49 m
278.091 88.903 278.267 101.92 278.062 109.198 C
S
391.878 116.562 m
391.71 123.412 391.848 133.069 391.987 140.196 C
278.807 109.843 l
S
391.78 116.216 m
278.345 80.821 L
S
0 J 4 M
390.509 142.552 m
277.729 112.324 l
S
391.221 114.079 m
275.518 76.847 l
275.448 74.399 273.648 73.049 v
S
272.708 72.812 m
391.933 111.943 l
394.781 114.434 394.424 115.858 y
394.424 138.993 l
394.069 146.823 385.17 143.264 y
275.302 114.543 l
S
263.794 265.356 m
395.339 267.468 l
S
392.645 233.408 m
392.647 150.665 l
355.629 140.416 l
S
268.867 228.266 m
394.17 238.709 l
396.047 239.098 396.947 240.448 v
S
2 J 2 M
270.762 259.893 m
270.966 252.683 270.791 239.949 270.791 231.208 c
S
271.473 260.074 m
394.675 262.931 L
394.675 240.448 l
S
394.646 240.509 m
271.534 231.153 L
S
388.018 143.976 m
394.977 145.716 394.312 150.139 y
S
0 J 4 M
392.215 234.044 m
268.835 222.334 l
268.835 118.949 l
S
363.977 231.792 m
363.93 143.097 l
S
332.431 228.106 m
332.683 134.722 l
S
392.463 270.344 m
396.778 267.468 396.778 263.873 v
S
272.759 257.671 m
393.182 260.998 l
S
272.759 255.335 m
393.182 259.559 l
S
272.759 252.998 m
393.182 258.121 l
S
272.759 250.841 m
393.182 256.324 l
S
272.759 248.505 m
393.003 254.527 l
S
272.759 245.988 m
392.823 252.549 l
S
272.759 243.472 m
393.182 250.393 l
S
272.938 240.776 m
393.003 248.236 l
S
272.759 238.53 m
393.003 246.079 l
S
273.209 235.834 m
393.182 244.102 l
S
273.209 233.408 m
393.182 242.125 l
S
287.629 109.592 m
390.153 138.103 l
S
390.153 136.324 m
285.202 106.284 l
S
390.153 134.366 m
286.552 104.598 l
S
390.153 132.053 m
288.174 102.735 l
S
390.153 129.739 m
291.679 101.499 l
S
390.153 127.604 m
292.674 99.814 l
S
390.331 125.468 m
293.929 97.678 l
S
390.153 123.333 m
297.079 96.086 l
S
280.36 88.661 m
390.153 121.197 l
S
280.36 86.169 m
390.331 119.596 l
S
280.36 83.678 m
390.153 117.638 l
S
290.316 110.55 m
280.36 107.525 l
S
291.645 108.048 m
280.36 105.211 l
S
289.281 105.547 m
280.36 102.72 l
S
291.416 103.768 m
280.182 100.228 l
S
293.018 101.809 m
280.36 97.915 l
S
295.509 100.564 m
280.36 95.601 l
S
297.111 98.784 m
280.36 93.288 l
S
299.603 97.005 m
280.538 90.974 l
S
0 O
0 g
492.903 278.43 m
262.507 279.869 l
262.507 289.124 l
492.903 282.92 l
492.903 278.43 l
f
392.645 216.782 m
392.645 223.971 l
F
271.506 200.775 m
392.645 215.344 l
392.645 223.612 l
270.795 211.203 l
F
0 R
0 G
392.645 225.768 m
392.645 211.389 l
S
1 G
363.977 220.467 m
363.977 211.839 l
S
332.431 216.422 m
332.431 207.435 l
S
u
300.078 289.396 m
300.078 280.409 l
S
U
332.431 288.318 m
332.431 280.05 l
S
362.627 287.599 m
362.627 279.69 l
S
0 G
301.098 225.148 m
301.098 127.049 l
S
270.952 262.345 m
396.418 265.311 l
S
396.778 263.513 m
396.778 239.788 l
396.695 237.791 394.445 236.891 v
267.512 225.461 l
S
264.648 118.049 m
268.698 118.049 270.498 119.849 v
270.498 222.448 l
267.798 221.098 264.648 221.548 y
264.648 117.599 l
217.848 105.899 l
S
1 G
262.398 288.598 m
262.398 279.598 l
S
189.498 201.298 m
189.498 189.598 l
S
228.198 205.798 m
228.198 194.998 l
S
301.098 213.898 m
301.098 203.998 l
S
0 G
2 J 0.702 w 2 M
391.924 116.169 m
391.758 122.923 391.895 132.798 392.032 139.827 C
S
0 J 4 M
394.436 138.64 m
394.436 115.826 l
S
0.9 w
111.874 253.498 m
263.748 257.098 l
S
111.874 250.573 m
263.748 255.298 l
S
111.874 247.648 m
263.748 253.498 l
S
111.874 244.948 m
263.748 251.248 l
S
111.874 235.723 m
263.748 243.823 l
S
111.874 225.598 m
263.748 235.948 l
S
111.874 221.998 m
263.748 233.473 l
S
0.702 w
391.991 351.568 m
493.077 333.817 l
493.077 270.255 l
391.991 270.342 l
S
470.086 337.743 m
470.086 270.255 l
S
446.532 341.669 m
446.532 270.255 l
S
421.297 346.155 m
421.297 270.424 l
S
464.626 168.912 m
398.213 152.53 l
S
2 J 2 M
396.497 118.12 m
396.497 124.682 396.635 134.835 396.474 140.512 C
S
493.126 150.306 m
492.995 155.648 492.878 163.181 492.986 168.74 C
397.056 141.014 l
S
493.049 150.036 m
396.695 118.378 L
S
0 J 4 M
491.833 170.578 m
396.665 143.85 l
S
492.389 148.369 m
394.49 115.278 l
S
393.032 112.316 m
S
392.298 112.13 m
492.944 146.703 l
495.165 148.646 494.887 149.757 y
494.887 167.802 l
494.61 173.91 487.669 171.133 y
388.022 143.781 l
S
395.47 267.265 m
495.601 268.011 l
S
493.499 241.445 m
493.489 176.33 l
464.626 168.912 l
S
398.302 238.559 m
494.689 245.58 l
496.152 245.883 496.854 246.936 v
S
2 J 2 M
398.431 262.779 m
398.453 240.629 l
S
398.985 262.695 m
495.083 264.472 L
495.083 246.936 l
S
495.06 246.984 m
399.032 240.361 L
S
489.89 171.688 m
495.318 173.045 494.774 176.408 y
494.827 244.249 l
S
0 J 4 M
471.139 240.184 m
471.101 171.003 l
S
446.532 237.31 m
446.504 164.471 l
S
493.357 270.255 m
496.723 268.011 496.723 265.208 v
S
399.989 260.82 m
493.918 262.965 l
S
400.439 259.223 m
493.918 261.844 l
S
400.664 257.175 m
493.918 260.721 l
S
399.989 255.043 m
493.918 259.319 l
S
399.989 253.221 m
493.778 257.918 l
S
399.989 251.258 m
493.638 256.375 l
S
399.989 249.295 m
493.918 254.693 l
S
400.128 247.192 m
493.778 253.011 l
S
399.989 245.44 m
493.778 251.329 l
S
400.565 243.562 m
493.918 249.786 l
S
400.565 242.12 m
493.918 248.244 l
S
491.555 166.62 m
398.444 138.913 l
S
491.78 164.867 m
398.597 136.924 l
S
491.78 163.063 m
398.512 134.795 l
S
491.78 161.033 m
398.546 132.931 l
S
491.78 159.143 m
398.422 131.167 l
S
491.695 157.703 m
398.726 128.826 l
S
491.78 155.812 m
398.708 126.909 l
S
398.267 124.493 m
491.78 154.371 l
S
398.267 122.549 m
491.695 152.672 l
S
398.267 120.606 m
491.555 151.144 l
S
0 O
0 g
493.077 282.872 m
493.077 277.265 l
F
493.499 228.476 m
493.499 234.084 l
F
399.011 215.992 m
493.499 227.355 l
493.499 233.804 l
398.456 224.125 l
F
0 R
0 G
493.499 235.486 m
493.499 224.271 l
S
1 G
471.139 231.352 m
471.139 224.622 l
S
446.532 228.195 m
446.532 221.186 l
S
421.297 285.116 m
421.297 278.106 l
S
446.532 284.275 m
446.532 277.826 l
S
470.086 283.713 m
470.086 277.545 l
S
0 G
422.092 235.002 m
422.092 158.485 l
S
398.354 264.916 m
496.442 266.33 l
S
496.723 264.927 m
496.723 246.422 l
496.658 244.864 494.903 244.162 v
394.095 236.709 l
S
393.549 151.015 m
396.133 150.777 398.225 152.869 v
398.225 232.896 l
S
1 G
422.092 226.227 m
422.092 218.505 l
S
0.9 w
391.877 285.796 m
391.877 278.609 l
S
421.577 284.896 m
421.577 278.609 l
S
446.777 283.096 m
446.777 277.709 l
S
470.177 283.996 m
470.177 278.609 l
S
0 G
396.497 234.148 m
396.478 151.717 l
S
392.428 234.157 m
493.163 241.941 l
S
%%Trailer
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
54 144 558 648 C
0 72 612 720 C
FMENDPAGE
%%EndPage: "3" 8
%%Page: "4" 8
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (4) 54 108.7 S
3 10 Q
0.1 (S1002\32010M141.00) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
0 14 Q
0 X
0 K
(\245) 198 640.67 T
1 11 Q
0.11 (The CS-2 Peripheral Module) 210.6 640.67 S
3 F
0.11 (. Meiko document S1002\32010M142.) 341.48 640.67 S
2 15 Q
0.15 (Processor Boards) 54 606.6 S
3 11 Q
0.11 (Three types of processor board are currently available:) 198 584.27 S
0 14 Q
(\245) 198 563.27 T
3 11 Q
0.11 (The SP) 210.6 563.27 S
0.11 (ARC/IO board.) 242.34 563.27 S
0 14 Q
(\245) 198 541.87 T
3 11 Q
0.11 (The multi-SP) 210.6 541.87 S
0.11 (ARC/Compute board.) 269.89 541.87 S
0 14 Q
(\245) 198 520.47 T
3 11 Q
0.11 (The VPU board.) 210.6 520.47 S
-0.2 0.11 (Each board includes one or more SP) 198 499.07 B
-0.2 0.11 (ARC processors, each running a full port of) 359.58 499.07 B
0.11 (the Solaris operating system. All SP) 198 486.07 S
0.11 (ARC processors have an associated Elan) 359.84 486.07 S
0.11 (Communications Processor \050ECP\051 sharing a cache coherent M-Bus memory in-) 198 473.07 S
0.11 (terface; the ECP is the SP) 198 460.07 S
0.11 (ARCs interface to the CS-2 data network. In addition) 313.2 460.07 S
-0.07 0.11 (all boards include a board control processor which is the boards interface to the) 198 447.07 B
0.11 (CS-2 control and diagnostics network.) 198 434.07 S
-0.05 0.11 (The SP) 198 413.07 B
-0.05 0.11 (ARC/IO board includes all the functionality of a high performance Unix) 229.68 413.07 B
-0.55 0.11 (workstation, with up to 2 SP) 198 400.07 B
-0.55 0.11 (ARC M-Bus processor modules, memory) 322.6 400.07 B
-0.55 0.11 (, a range of) 506.55 400.07 B
0.11 (standard I/O interfaces \050including SCSI, Ethernet, and serial\051, and 3 standard S-) 198 387.07 S
0.11 (Bus peripheral interfaces.) 198 374.07 S
0.11 (The multi-SP) 198 353.07 S
0.11 (ARC/compute board consists of up to 4 SP) 257.29 353.07 S
0.11 (ARC processors each) 449.82 353.07 S
0.11 (with a dedicated cache coherent M-Bus interface to the memory system and an) 198 340.07 S
0.11 (Elan Communications Processor) 198 327.07 S
0.11 (. The SP) 344.19 327.07 S
0.11 (ARC processors on this board have no) 381.64 327.07 S
0.11 (additional I/O capabilities and must be con\336gured as diskless Unix clients serv-) 198 314.07 S
0.11 (ing via the CS-2 data network from one or more of the single SP) 198 301.07 S
0.11 (ARC boards.) 487.75 301.07 S
-0.65 0.11 (The VPU board has a single SP) 198 280.07 B
-0.65 0.11 (ARC processor) 334.97 280.07 B
-0.65 0.11 (, Elan Communications Processor) 402.82 280.07 B
-0.65 0.11 (,) 552.93 280.07 B
0.11 (memory system, and some I/O capabilities \050including standard SBus slots\051. In) 198 267.07 S
-0 0.11 (addition this board includes 2 Fujitsu micro vector co-processors which cooper-) 198 254.07 B
0.11 (ate with the SP) 198 241.07 S
0.11 (ARC processors via a cache coherent M-Bus interface.) 264.95 241.07 S
0.11 (More information about the processor boards can be found in:) 198 220.07 S
0 14 Q
(\245) 198 199.07 T
1 11 Q
0.11 (SP) 210.6 199.07 S
0.11 (ARC/IO Pr) 221.62 199.07 S
0.11 (ocessing Element User) 271.4 199.07 S
0.11 (\325) 374.93 199.07 S
0.11 (s Guide) 377.28 199.07 S
3 F
0.11 (, document S1002\32010M137.) 411.96 199.07 S
0 14 Q
(\245) 198 177.67 T
1 11 Q
0.11 (Quad SP) 210.6 177.67 S
0.11 (ARC/Compute Pr) 249.36 177.67 S
0.11 (ocessing Elements User) 327.8 177.67 S
0.11 (\325) 435.72 177.67 S
0.11 (s Guide) 438.08 177.67 S
3 F
0.11 (, S1002\32010M138.) 472.76 177.67 S
0 14 Q
(\245) 198 156.27 T
1 11 Q
0.11 (V) 210.6 156.27 S
0.11 (ector Pr) 216.21 156.27 S
0.11 (ocessing Element User) 253.04 156.27 S
0.11 (\325) 356.57 156.27 S
0.11 (s Guide) 358.92 156.27 S
3 F
0.11 (, document S1002\32010M139.) 393.6 156.27 S
FMENDPAGE
%%EndPage: "4" 9
%%Page: "5" 9
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (Hardware Overview) 90.28 108.7 S
3 9 Q
0.09 (5) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (1) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
2 15 Q
0 X
0.15 (Network Switch Boards) 54 638 S
3 11 Q
0.11 (There are two types of network switch card, both built from one or more Elite) 198 615.67 S
0.11 (Network Switches \050ENS\051.) 198 602.67 S
0 14 Q
(\245) 198 581.67 T
3 11 Q
0.11 (Backplane switch cards.) 210.6 581.67 S
0 14 Q
(\245) 198 560.27 T
3 11 Q
0.11 (Module switch cards.) 210.6 560.27 S
0.11 (The backplane switch cards are \336tted into the rear of the Processor Module di-) 198 538.87 S
-0.04 0.11 (rectly to the module\325) 198 525.87 B
-0.04 0.11 (s backplane; they of) 291.56 525.87 B
-0.04 0.11 (fer the \336rst level of switching between) 381.74 525.87 B
-0.34 0.11 (the processors in the module. Up to 8 backplane switch cards may be \336tted to of-) 198 512.87 B
0.11 (fer full interconnection, on two independent network layers, of 4 multi-SP) 198 499.87 S
0.11 (ARC) 531.42 499.87 S
0.11 (boards \050up to 16 SP) 198 486.87 S
0.11 (ARC processors\051.) 285.86 486.87 S
0.11 (The module switch cards must be installed in a Switch Module. They provide) 198 465.87 S
-0.2 0.11 (network switching for higher levels of the network. Three variants are available) 198 452.87 B
-0.23 0.11 (which may be used in combination to build a switch network for any size of sys-) 198 439.87 B
0.11 (tem.) 198 426.87 S
0.11 (More information about the Meiko Switch boards can be found in:) 198 405.87 S
0 14 Q
(\245) 198 384.87 T
1 11 Q
0.11 (The CS-2 Pr) 210.6 384.87 S
0.11 (ocessor Module) 266.4 384.87 S
3 F
0.11 (, Meiko document S1002\32010M128) 337.9 384.87 S
0 14 Q
(\245) 198 363.47 T
1 11 Q
0.11 (The CS-2 Switch Module) 210.6 363.47 S
3 F
0.11 (, Meiko document S1002\32010M132.) 322.71 363.47 S
2 15 Q
0.15 (I/O Devices) 54 329.4 S
3 11 Q
-0.49 0.11 (The use of standard interfaces on the processor boards \050such as SCSI and S-Bus\051) 198 307.07 B
-0.24 0.11 (allows a lar) 198 294.07 B
-0.24 0.11 (ge range of I/O devices to be connected to your CS-2. These devices) 249.36 294.07 B
0.11 (will fall into one of the following categories:) 198 281.07 S
0 14 Q
(\245) 198 260.07 T
3 11 Q
0.11 (System Console.) 210.6 260.07 S
0 14 Q
(\245) 198 238.67 T
3 11 Q
0.11 (SCSI disk devices.) 210.6 238.67 S
0 14 Q
(\245) 198 217.27 T
3 11 Q
0.11 (Other I/O devices.) 210.6 217.27 S
-0.15 0.11 (The System Console must be a colour graphics workstation connected to one of) 198 195.87 B
0.11 (the processor boards via an S-Bus graphics cards.) 198 182.87 S
FMENDPAGE
%%EndPage: "5" 10
%%Page: "6" 10
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (6) 54 108.7 S
3 10 Q
0.1 (S1002\32010M141.00) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
3 11 Q
0 X
0 K
0.11 (SCSI disk devices will typically be \336tted into the Processor Module alongside) 198 640.67 S
0.11 (their host processor) 198 627.67 S
0.11 (, or in a dedicated Peripheral Module which may be con\336g-) 285.91 627.67 S
0.11 (ured either as a RAID device or as an array of disks.) 198 614.67 S
0.11 (Other I/O devices will be mounted externally to the CS-2. Cables taken from a) 198 593.67 S
-0.52 0.11 (processor board\325) 198 580.67 B
-0.52 0.11 (s front panel are routed to the rear of the Bay and then via under) 272.24 580.67 B
-0.52 0.11 (-) 554.23 580.67 B
-0.75 0.11 (\337oor cable ducts to a dedicated Peripheral Box. In most systems a Peripheral Box) 198 567.67 B
0.11 (containing CD-ROM, QITC, and Exabyte will be located near the system con-) 198 554.67 S
0.11 (sole.) 198 541.67 S
2 15 Q
0.15 (The CS-2 Data Network) 54 508 S
3 11 Q
0.11 (The data network is built upon the Elan Communications Processors \050ECP\051, of) 198 485.67 S
-0.82 0.11 (which there is one for each processing element in your system, and Elite Network) 198 472.67 B
-0.55 0.11 (Switches \050ENS\051. Interconnection of the Elan and Elite devices is currently by 50-) 198 459.67 B
0.11 (way ribbon cables which are housed in the cable ducts at the rear of the Bay) 198 446.67 S
0.11 (.) 540.14 446.67 S
0.11 (The Elan Communications Processor shares a cache coherent M-Bus interface) 198 425.67 S
0.11 (with its host SP) 198 412.67 S
0.11 (ARC processor) 267.52 412.67 S
0.11 (. It of) 335.86 412.67 S
0.11 (fers two independent byte-wide data links) 360.57 412.67 S
0.11 (onto the network, each capable of bidirectional operation at 50Mbytes/s) 198 399.67 S
-0.02 0.11 (\050100Mbytes/s total\051. The ECP supports remote read, write, and synchronisation) 198 386.67 B
0.11 (operations, with virtual processor addressing and virtual address translation all) 198 373.67 S
-0.54 0.11 (handled in hardware. All communications between parallel applications are rout-) 198 360.67 B
0.11 (ed via this device, as well as NFS mounting of \336lesystems.) 198 347.67 S
-0.15 0.11 (The data network is built upon the Elite Network Switches. These are 4x4 cross) 198 326.67 B
-0.74 0.11 (point switches with byte-wide bidirectional data paths. Switching is byte steered,) 198 313.67 B
0.11 (with the \336rst byte of an incoming message identifying the link used for the out-) 198 300.67 S
0.11 (going message; route bytes are pre-pended to network packets by the ECP) 198 287.67 S
0.11 (.) 531.16 287.67 S
0.11 (Broadcasts over a contiguous range of links are supported, with hardware sup-) 198 274.67 S
-0.17 0.11 (port for the recombination of acknowledge or not-acknowledge tokens from the) 198 261.67 B
-0.57 0.11 (broadcast destinations. The number of network switches increases logarithmical-) 198 248.67 B
-0.08 0.11 (ly with the number of processing elements to provide full point to point connec-) 198 235.67 B
0.11 (tivity and increased network bandwidth for any size of machine with minimal) 198 222.67 S
0.11 (increases in component counts and cabling.) 198 209.67 S
-0.19 0.11 (The ECP and ENS are described in more detail in the following Meiko manuals:) 198 188.67 B
0 14 Q
(\245) 198 167.67 T
1 11 Q
0.11 (The Communications Pr) 210.6 167.67 S
0.11 (ocessor Overview) 320.06 167.67 S
3 F
0.11 (, document S1002\32010M100.) 399.61 167.67 S
FMENDPAGE
%%EndPage: "6" 11
%%Page: "7" 11
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (Hardware Overview) 90.28 108.7 S
3 9 Q
0.09 (7) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (1) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
0 14 Q
0 X
(\245) 198 640.67 T
1 11 Q
0.11 (The Communications Network Overview) 210.6 640.67 S
3 F
0.11 (, document S1002\32010M105.) 392.47 640.67 S
2 15 Q
0.15 (The Control and Diagnostics Network) 54 606.6 S
3 11 Q
0.11 (The control and diagnostic network is a hierarchical, low bandwidth serial net-) 198 584.27 S
-0.33 0.11 (work that runs throughout the system. All modules, boards, and processors have) 198 571.27 B
0.11 (an interface to this network.) 198 558.27 S
-0.66 0.11 (The control network carries heartbeat signals from all components \050to signal con-) 198 537.27 B
-0.24 0.11 (tinued operation\051 and is also used by system software, such as the machine man-) 198 524.27 B
0.11 (ager and Pandora, to query the operating status of system components, and to) 198 511.27 S
0.11 (reset or recon\336gure those components. Remote console connections to the) 198 498.27 S
0.11 (SP) 198 485.27 S
0.11 (ARC processors can also be carried over the control network.) 209.44 485.27 S
-0.04 0.11 (The control network is independent of the data network and does not impact on) 198 464.27 B
0.11 (its performance.) 198 451.27 S
0.11 (The control network is described in the following Meiko document:) 198 430.27 S
0 14 Q
(\245) 198 409.27 T
1 11 Q
-0.47 0.11 (An Overview of the Contr) 210.6 409.27 B
-0.47 0.11 (ol Ar) 323.98 409.27 B
-0.47 0.11 (ea Network \050CAN\051) 345.95 409.27 B
3 F
-0.47 0.11 (, document S1002\32010M140.) 428.65 409.27 B
FMENDPAGE
%%EndPage: "7" 12
%%Page: "8" 12
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (8) 54 108.7 S
3 10 Q
0.1 (S1002\32010M141.00) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
FMENDPAGE
%%EndPage: "8" 13
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 12 1
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-BoldItalic
%%+ Times-Roman
%%+ Palatino-Italic
%%+ Palatino-Roman
