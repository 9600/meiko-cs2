%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%%BeginProlog
%
% FrameMaker postscript_prolog 3.0, for use with FrameMaker 3.0
% This postscript_prolog file is Copyright (c) 1986-1991 Frame Technology
% Corporation.  All rights reserved.  This postscript_prolog file may be
% freely copied and distributed in conjunction with documents created using
% FrameMaker.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 

% Set up Color vs. Black-and-White

/FMPrintInColor false def
/colorimage where { pop
    /currentcolortransfer where { pop
	/FMPrintInColor true def
	statusdict begin 
	    /processcolors where { 
		pop processcolors 1 le {
		    /FMPrintInColor false def
		} if
	    }{
		/deviceinfo where {
		    pop deviceinfo /Colors known { 
			deviceinfo /Colors get 1 le {
			    /FMPrintInColor false def
			} if
		    } if
		} if
	    } ifelse
	end
	/currentcanvas where {  % NeWSprint?
	    pop systemdict /separationdict known not {
		/FMPrintInColor false def
	    } if
	} if
    } if
} if


% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def

/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 23 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-BoldItalic FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Palatino-Italic FMFONTDEFINE
5 0 /Palatino-Roman FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
7 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
185 83.74 393.76 101.24 R
7 X
0 K
V
54 630 573 702 C
54 630 573 702 R
7 X
0 K
V
0 72 612 720 C
0 32 Q
0 X
0 K
8 (C) 58.19 676.66 S
1 27 Q
6.75 (omputing) 89.29 676.66 S
0 32 Q
8 (S) 82.98 645.61 S
1 27 Q
6.75 (urface) 108.77 645.61 S
56 670.94 560 670.94 2 L
0.5 H
2 Z
N
414.67 95.67 567.17 156.17 C
414.67 95.67 567.17 156.17 R
7 X
0 K
V
0 -322.62 -285.88 229.38 1.12 552 287 440.67 105.83 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
53 528.25 549 595 C
0 72 612 720 C
2 25 Q
0 X
0 K
(Overview of the Control Area Network \050CAN\051) 53 511.58 T
56.42 105.83 155.58 121.17 R
7 X
V
0 10 Q
0 X
(S1002\32010M140.00) 56.42 114.5 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
184.97 83.74 393.7 101.23 R
7 X
0 K
V
3 11 Q
0 X
-0.09 0.11 (The information supplied in this document is believed to be true but no liability is assumed for its use or for the) 54 640.67 B
-0.57 0.11 (infringements of the rights of others resulting from its use. No licence or other rights are granted in respect of any) 54 627.67 B
0.11 (rights owned by any of the or) 54 614.67 S
0.11 (ganisations mentioned herein.) 186.53 614.67 S
0.11 (This document may not be copied, in whole or in part, without the prior written consent of Meiko W) 54 595.67 S
0.11 (orld Incor-) 506.29 595.67 S
0.11 (porated.) 54 582.67 S
0.11 (\251 copyright 1995 Meiko W) 54 563.67 S
0.11 (orld Incorporated.) 178.39 563.67 S
0.11 (The speci\336cations listed in this document are subject to change without notice.) 54 544.67 S
-0.6 0.11 (Meiko, CS-2, Computing Surface, and CST) 54 525.67 B
-0.6 0.11 (ools are trademarks of Meiko Limited. Sun, Sun and a numeric suf) 247.04 525.67 B
-0.6 0.11 (\336x,) 540.93 525.67 B
0.11 (Solaris, SunOS, AnswerBook, NFS, XV) 54 512.67 S
0.11 (iew) 235.02 512.67 S
0.11 (, and OpenW) 250.52 512.67 S
0.11 (indows are trademarks of Sun Microsystems, Inc. All) 309.64 512.67 S
-0.17 0.11 (SP) 54 499.67 B
-0.17 0.11 (ARC trademarks are trademarks or registered trademarks of SP) 65.44 499.67 B
-0.17 0.11 (ARC International, Inc. Unix, Unix System V) 348.23 499.67 B
-0.17 0.11 (,) 552.45 499.67 B
0.11 (and OpenLook are registered trademarks of Unix System Laboratories, Inc. The X W) 54 486.67 S
0.11 (indows System is a trade-) 438.09 486.67 S
-0.45 0.11 (mark of the Massachusetts Institute of T) 54 473.67 B
-0.45 0.11 (echnology) 232.11 473.67 B
-0.45 0.11 (. A) 278.21 473.67 B
-0.45 0.11 (VS is a trademark of Advanced V) 290.11 473.67 B
-0.45 0.11 (isual Systems Inc. V) 439.21 473.67 B
-0.45 0.11 (erilog) 529.27 473.67 B
0.11 (is a registered trademark of Cadence Design Systems, Inc. All other trademarks are acknowledged.) 54 460.67 S
0.11 (Circulation Control:) 54 192.67 S
4 F
0.11 (External) 151.67 192.67 S
0 F
(Meiko\325) 126 418.67 T
(s addr) 159.2 418.67 T
(ess in the US is:) 188.65 418.67 T
(Meiko) 126 392.67 T
(130 Baker A) 126 379.67 T
(venue) 183.85 379.67 T
(Concord MA01742) 126 366.67 T
(508 371 0088) 126 340.67 T
(Fax: 508 371 7516) 126 327.67 T
(Meiko\325) 306 418.67 T
(s addr) 339.2 418.67 T
(ess in the UK is:) 368.64 418.67 T
(Meiko Limited) 306 392.67 T
(650 Aztec W) 306 379.67 T
(est) 364.65 379.67 T
(Bristol) 306 366.67 T
(BS12 4SD) 306 353.67 T
(T) 306 327.67 T
(el: 01454 616171) 312.33 327.67 T
(Fax: 01454 618188) 306 314.67 T
3 F
(Issue Status:) 60 264.67 T
(Draft) 133.78 264.67 T
(Preliminary) 133.78 249.67 T
(Release) 133.78 234.67 T
(x) 201.06 234.67 T
(Obsolete) 133.78 219.67 T
195 244 214.25 258.75 R
0.5 H
2 Z
N
195 229 214.25 243.75 R
N
195 259 214.25 273.75 R
N
195 214 214.25 228.75 R
N
FMENDPAGE
%%EndPage: "2" 3
%%Page: "i" 3
612 792 0 FMBEGINPAGE
5 9 Q
0 X
0 K
0.09 (i) 555.29 108.7 S
197 482 558 482 2 L
0.5 H
2 Z
N
4 20 Q
(Contents) 198 489 T
185 83.74 393.76 101.24 R
7 X
V
0 14 Q
0 X
0.14 (1.) 198 457.01 S
0.14 (The Contr) 234 457.01 S
0.14 (ol Ar) 297.61 457.01 S
0.14 (ea Network) 328.78 457.01 S
0.14 (. . . . . . . . . . . . . . . . . .) 400.39 457.01 S
0.14 (1) 550.86 457.01 S
3 11 Q
0.11 (Introduction) 270 435.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 326.03 435.01 S
0.11 (1) 552.39 435.01 S
0.11 (Network Hierarchy) 270 420.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 357.49 420.01 S
0.11 (1) 552.39 420.01 S
0.11 (CAN Messages) 270 405.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 340.33 405.01 S
0.11 (2) 552.39 405.01 S
0.11 (Network Protocol) 270 390.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 351.77 390.01 S
0.11 (3) 552.39 390.01 S
0.11 (Prioritisation) 306 375.01 S
0.11 (. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 366.07 375.01 S
0.11 (4) 552.39 375.01 S
0.11 (Network Error Detection and Recovery) 306 360.01 S
0.11 (. . . . . . . .) 486.19 360.01 S
0.11 (4) 552.39 360.01 S
0.11 (Example \321 Snooping the CAN) 270 345.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . .) 414.69 345.01 S
0.11 (5) 552.39 345.01 S
0.11 (Appendix A \321 Packet Format) 270 330.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . .) 408.97 330.01 S
0.11 (7) 552.39 330.01 S
0.11 (Header Data) 306 315.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 363.21 315.01 S
0.11 (7) 552.39 315.01 S
0.11 (Address Data) 306 300.01 S
0.11 ( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 368.93 300.01 S
0.11 (8) 552.39 300.01 S
FMENDPAGE
%%EndPage: "i" 4
%%Page: "ii" 4
612 792 0 FMBEGINPAGE
5 9 Q
0 X
0 K
0.09 (ii) 54 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
FMENDPAGE
%%EndPage: "ii" 5
%%Page: "1" 5
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (1) 553.41 108.7 S
54 103.2 86.66 121.2 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.74 105.76 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
198 500.18 558 500.18 2 L
0.3 H
2 Z
0 X
0 K
N
185 83.74 393.76 101.24 R
7 X
V
55.01 522.61 558.36 589.36 C
0 72 612 720 C
2 18 Q
0 X
0 K
0.18 (The Control Area Network) 199.01 510.61 S
2 24 Q
0.24 (1) 544.9 510.61 S
2 15 Q
0.15 (Introduction) 54 456.34 S
3 11 Q
-0.01 0.11 (The Control Area Network \050CAN\051 is a low bandwidth serial network. It is used) 198 434.01 B
-0.67 0.11 (by the CS-2 to carry control, diagnostic, and remote console traf) 198 421.01 B
-0.67 0.11 (\336c between proc-) 481.11 421.01 B
-0.55 0.11 (essors. The CAN is independent of the CS-2 data network and does not therefore) 198 408.01 B
0.11 (impact on its performance.) 198 395.01 S
-0.02 0.11 (An understanding of the CAN is not required for normal operation of the CS-2.) 198 374.01 B
-0.26 0.11 (It is typically used by the resource management system to maintain the machine) 198 361.01 B
0.11 (database, and by Pandora to create remote console connections and to gather) 198 348.01 S
0.11 (component operating status. The information in this document is therefore pro-) 198 335.01 S
0.11 (vided for information only) 198 322.01 S
0.11 (.) 317.16 322.01 S
2 15 Q
0.15 (Network Hierarchy) 54 288.34 S
3 11 Q
-0.28 0.11 (The CAN is hierarchical, with the number of nodes on each network limited \050by) 198 266.01 B
0.11 (the electrical characteristics of the CAN transceivers\051 to around 30 nodes.) 198 253.01 S
0.11 (At the lowest level is the L-CAN, a network interconnecting the processors in) 198 232.01 S
0.11 (each module. This connects up to 16 SP) 198 219.01 S
0.11 (ARC processors \050allowing for four) 377.15 219.01 S
0.11 (boards each with four SP) 198 206.01 S
0.11 (ARC processors\051, 4 board controller processors \050H8) 310.22 206.01 S
0.11 (processors\051, and 1 module controller \050also an H8 processor\051. The interface be-) 198 193.01 S
0.11 (tween the processor and the CAN is handled in each case by dedicated CAN) 198 180.01 S
0.11 (transceiver devices.) 198 167.01 S
FMENDPAGE
%%EndPage: "1" 6
%%Page: "2" 6
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (2) 54 108.7 S
3 10 Q
0.1 (S1002\32010M140.00) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
0 11 Q
0 X
0 K
0.11 (Figur) 198 640.67 S
0.11 (e 1-1) 224.63 640.67 S
0.11 (L-CAN Connections within a Pr) 261 640.67 S
0.11 (ocessor Module) 414.93 640.67 S
3 F
0.11 (The modules within a Cluster \0503 bays, up to 24 modules\051 are interconnected by) 198 450.17 S
-0.06 0.11 (the X-CAN, and the interconnection of Clusters is via the G-CAN. The transfer) 198 437.17 B
0.11 (of network traf) 198 424.17 S
0.11 (\336c from the L-CAN to the X-CAN is handled by each module\325) 265.43 424.17 S
0.11 (s) 547.58 424.17 S
-0.59 0.11 (controller) 198 411.17 B
-0.59 0.11 (, whereas the transfer from X-CAN to G-CAN is via nominated routers) 241.43 411.17 B
0.11 (\050selectable from Pandora\051.) 198 398.17 S
0 F
0.11 (Figur) 198 377.17 S
0.11 (e 1-2) 224.63 377.17 S
0.11 (X-CAN Connections within a Cluster) 261 377.17 S
2 15 Q
0.15 (CAN Messages) 54 239.17 S
3 11 Q
0.11 (A node requests status information from, or sends control requests to, another) 198 216.83 S
0.11 (CAN node by sending a message to it. The information or function that is re-) 198 203.83 S
-0.5 0.11 (quired by the sender is speci\336ed by addressing an) 198 190.83 B
1 F
-0.5 0.11 (object) 419.89 190.83 B
3 F
-0.5 0.11 ( at the recipient. Objects) 447.43 190.83 B
-0.53 0.11 (are either hardware devices or software functions, the mapping from an object id) 198 177.83 B
54 144 558 648 C
198.5 472.5 558 637 C
334.45 592.14 403.62 583.81 403.62 497.14 334.45 505.48 4 Y
7 X
0 K
V
0.5 H
2 Z
0 X
N
353.62 580.48 325.29 585.48 2 L
3 H
N
352.45 564.14 324.12 569.14 2 L
N
353.79 514.48 325.45 519.48 2 L
N
353.45 529.81 325.12 534.81 2 L
N
353.12 546.81 324.79 551.81 2 L
N
353.45 587.14 383.45 582.98 383.45 570.48 353.45 574.64 4 Y
7 X
V
0.5 H
0 X
N
353.45 570.25 383.45 566.09 383.45 553.59 353.45 557.75 4 Y
7 X
V
0 X
N
353.45 553.36 383.45 549.2 383.45 536.7 353.45 540.86 4 Y
7 X
V
0 X
N
353.45 536.48 383.45 532.31 383.45 519.81 353.45 523.98 4 Y
7 X
V
0 X
N
361.95 517.97 353.62 518.81 353.62 512.97 361.95 511.31 4 Y
7 X
V
0 X
N
323.62 520.47 323.62 607.98 2 L
2 H
N
323.8 586.33 392.97 577.99 392.97 491.33 323.8 499.66 4 Y
7 X
V
0.5 H
0 X
N
342.97 574.66 314.64 579.66 2 L
3 H
N
341.8 558.33 313.47 563.33 2 L
N
343.14 508.66 314.8 513.66 2 L
N
342.8 523.99 314.47 528.99 2 L
N
342.47 540.99 314.14 545.99 2 L
N
342.8 581.33 372.8 577.16 372.8 564.66 342.8 568.83 4 Y
7 X
V
0.5 H
0 X
N
342.8 564.44 372.8 560.27 372.8 547.77 342.8 551.94 4 Y
7 X
V
0 X
N
342.8 547.55 372.8 543.38 372.8 530.88 342.8 535.05 4 Y
7 X
V
0 X
N
342.8 530.66 372.8 526.49 372.8 513.99 342.8 518.16 4 Y
7 X
V
0 X
N
351.3 512.16 342.97 512.99 342.97 507.16 351.3 505.49 4 Y
7 X
V
0 X
N
312.97 514.66 312.97 602.16 2 L
2 H
N
313.15 580.51 382.32 572.17 382.32 485.51 313.15 493.84 4 Y
7 X
V
0.5 H
0 X
N
332.32 568.84 303.98 573.84 2 L
3 H
N
331.15 552.51 302.82 557.51 2 L
N
332.48 502.84 304.15 507.84 2 L
N
332.15 518.17 303.82 523.17 2 L
N
331.82 535.17 303.48 540.17 2 L
N
332.15 575.51 362.15 571.34 362.15 558.84 332.15 563.01 4 Y
7 X
V
0.5 H
0 X
N
332.15 558.62 362.15 554.45 362.15 541.95 332.15 546.12 4 Y
7 X
V
0 X
N
332.15 541.73 362.15 537.56 362.15 525.06 332.15 529.23 4 Y
7 X
V
0 X
N
332.15 524.84 362.15 520.67 362.15 508.17 332.15 512.34 4 Y
7 X
V
0 X
N
340.65 506.34 332.32 507.17 332.32 501.34 340.65 499.67 4 Y
7 X
V
0 X
N
302.32 508.84 302.32 596.34 2 L
2 H
N
302.5 574.69 371.67 566.36 371.67 479.69 302.5 488.02 4 Y
7 X
V
0.5 H
0 X
N
321.67 563.02 293.33 568.02 2 L
2 H
N
320.5 546.69 292.17 551.69 2 L
N
321.83 497.02 293.5 502.02 2 L
N
321.5 512.36 293.17 517.36 2 L
N
321.17 529.36 292.83 534.36 2 L
N
321.5 569.69 351.5 565.52 351.5 553.02 321.5 557.19 4 Y
7 X
V
0.5 H
0 X
N
321.5 552.8 351.5 548.63 351.5 536.13 321.5 540.3 4 Y
7 X
V
0 X
N
321.5 535.91 351.5 531.74 351.5 519.24 321.5 523.41 4 Y
7 X
V
0 X
N
321.5 519.02 351.5 514.86 351.5 502.36 321.5 506.52 4 Y
7 X
V
0 X
N
330 500.52 321.67 501.36 321.67 495.52 330 493.86 4 Y
7 X
V
0 X
N
239.17 584.69 278.33 578.86 278.33 559.69 239.17 565.52 4 Y
7 X
V
0 X
N
268 572.52 296.33 567.52 2 L
2 H
N
259.83 569.02 268.17 568.19 268.17 574.02 259.83 575.69 4 Y
7 X
V
0.5 H
0 X
N
291.67 503.02 291.67 590.52 2 L
2 H
N
292.14 591.24 323.57 607.67 2 L
N
3 11 Q
(Processor Board) 444.29 571.95 T
378.23 559.84 366.42 561.96 377.56 566.42 377.9 563.13 4 Y
V
377.9 563.12 443.57 569.81 2 L
0.5 H
N
(\050max. 4 per module\051) 444.29 560.95 T
(SP) 445.72 539.09 T
(ARC Processor) 456.94 539.09 T
(\050max. 4 per board\051) 445.72 528.09 T
360.05 553.8 349.28 559.1 361.22 560.31 360.63 557.05 4 Y
V
360.64 557.05 441.43 542.67 2 L
N
(H8 Board Controller) 447.14 508.38 T
(\0501 per board\051) 447.14 497.38 T
340.44 495.16 328.57 496.95 339.58 501.72 340.01 498.44 4 Y
V
340.01 498.44 444.29 511.95 2 L
N
(H8 Module) 205 542.67 T
(Controller) 205 531.67 T
249.93 567.82 261.43 571.24 253.48 562.25 251.7 565.04 4 Y
V
251.71 565.03 234.29 554.09 2 L
N
(L-CAN within Module) 342.86 624.09 T
337.13 612.08 325.71 608.38 333.43 617.57 335.28 614.82 4 Y
V
345 621.24 335.28 614.82 2 L
N
54 144 558 648 C
0 72 612 720 C
54 144 558 648 C
198.5 268.17 558 373.5 C
257.61 323.99 285.27 320.66 285.27 285.99 257.61 289.33 4 Y
7 X
0 K
V
0.5 H
2 Z
0 X
N
265.27 319.32 253.94 321.32 2 L
3 H
N
264.81 312.79 253.47 314.79 2 L
N
265.34 292.92 254.01 294.92 2 L
N
265.21 299.06 253.87 301.06 2 L
N
265.07 305.86 253.74 307.86 2 L
N
265.21 321.99 277.2 320.32 277.2 315.32 265.21 316.99 4 Y
7 X
V
0.5 H
0 X
N
265.21 315.23 277.2 313.57 277.2 308.57 265.21 310.23 4 Y
7 X
V
0 X
N
265.21 308.48 277.2 306.81 277.2 301.81 265.21 303.48 4 Y
7 X
V
0 X
N
265.21 301.73 277.2 300.06 277.2 295.06 265.21 296.73 4 Y
7 X
V
0 X
N
268.61 294.33 265.27 294.66 265.27 292.33 268.61 291.66 4 Y
7 X
V
0 X
N
253.27 295.33 253.27 330.32 2 L
2 H
N
253.35 321.66 281.01 318.33 281.01 283.67 253.35 287 4 Y
7 X
V
0.5 H
0 X
N
261.01 317 249.68 319 2 L
3 H
N
260.55 310.46 249.21 312.46 2 L
N
261.08 290.6 249.75 292.6 2 L
N
260.95 296.73 249.61 298.73 2 L
N
260.81 303.53 249.48 305.53 2 L
N
260.95 319.66 272.95 318 272.95 313 260.95 314.66 4 Y
7 X
V
0.5 H
0 X
N
260.95 312.91 272.95 311.24 272.95 306.24 260.95 307.91 4 Y
7 X
V
0 X
N
260.95 306.15 272.95 304.49 272.95 299.49 260.95 301.15 4 Y
7 X
V
0 X
N
260.95 299.4 272.95 297.73 272.95 292.73 260.95 294.4 4 Y
7 X
V
0 X
N
264.35 292 261.01 292.33 261.01 290 264.35 289.33 4 Y
7 X
V
0 X
N
249.01 293 249.01 328 2 L
2 H
N
249.09 319.34 276.75 316 276.75 281.34 249.09 284.67 4 Y
7 X
V
0.5 H
0 X
N
256.75 314.67 245.42 316.67 2 L
3 H
N
256.29 308.14 244.95 310.14 2 L
N
256.82 288.27 245.49 290.27 2 L
N
256.69 294.4 245.35 296.4 2 L
N
256.55 301.2 245.22 303.2 2 L
N
256.69 317.34 268.68 315.67 268.68 310.67 256.69 312.34 4 Y
7 X
V
0.5 H
0 X
N
256.69 310.58 268.68 308.92 268.68 303.92 256.69 305.58 4 Y
7 X
V
0 X
N
256.69 303.83 268.68 302.16 268.68 297.16 256.69 298.83 4 Y
7 X
V
0 X
N
256.69 297.07 268.68 295.4 268.68 290.4 256.69 292.07 4 Y
7 X
V
0 X
N
260.08 289.67 256.75 290 256.75 287.67 260.08 287.01 4 Y
7 X
V
0 X
N
244.75 290.67 244.75 325.67 2 L
2 H
N
244.83 317.01 272.49 313.68 272.49 279.01 244.83 282.34 4 Y
7 X
V
0.5 H
0 X
N
252.49 312.34 241.16 314.34 2 L
2 H
N
252.02 305.81 240.69 307.81 2 L
N
252.56 285.94 241.23 287.94 2 L
N
252.43 292.08 241.09 294.08 2 L
N
252.29 298.88 240.96 300.88 2 L
N
252.43 315.01 264.42 313.34 264.42 308.34 252.43 310.01 4 Y
7 X
V
0.5 H
0 X
N
252.43 308.25 264.42 306.59 264.42 301.59 252.43 303.26 4 Y
7 X
V
0 X
N
252.43 301.5 264.42 299.83 264.42 294.83 252.43 296.5 4 Y
7 X
V
0 X
N
252.43 294.74 264.42 293.08 264.42 288.08 252.43 289.74 4 Y
7 X
V
0 X
N
255.82 287.34 252.49 287.68 252.49 285.34 255.82 284.68 4 Y
7 X
V
0 X
N
219.49 321.01 235.16 318.68 235.16 311.01 219.49 313.34 4 Y
7 X
V
0 X
N
231.03 316.14 242.36 314.14 2 L
2 H
N
227.76 314.74 231.09 314.41 231.09 316.74 227.76 317.41 4 Y
7 X
V
0.5 H
0 X
N
240.49 288.34 240.49 323.34 2 L
2 H
N
240.68 323.63 253.25 330.2 2 L
N
227.5 317.22 214.17 319.56 2 L
N
360.24 323.99 387.9 320.66 387.9 285.99 360.24 289.33 4 Y
7 X
V
0.5 H
0 X
N
367.9 319.32 356.57 321.32 2 L
3 H
N
367.43 312.79 356.1 314.79 2 L
N
367.97 292.92 356.64 294.92 2 L
N
367.83 299.06 356.5 301.06 2 L
N
367.7 305.86 356.37 307.86 2 L
N
367.83 321.99 379.83 320.32 379.83 315.32 367.83 316.99 4 Y
7 X
V
0.5 H
0 X
N
367.83 315.23 379.83 313.57 379.83 308.57 367.83 310.23 4 Y
7 X
V
0 X
N
367.83 308.48 379.83 306.81 379.83 301.81 367.83 303.48 4 Y
7 X
V
0 X
N
367.83 301.73 379.83 300.06 379.83 295.06 367.83 296.73 4 Y
7 X
V
0 X
N
371.23 294.33 367.9 294.66 367.9 292.33 371.23 291.66 4 Y
7 X
V
0 X
N
355.9 295.33 355.9 330.32 2 L
2 H
N
355.98 321.66 383.64 318.33 383.64 283.67 355.98 287 4 Y
7 X
V
0.5 H
0 X
N
363.64 317 352.31 319 2 L
3 H
N
363.17 310.46 351.84 312.46 2 L
N
363.71 290.6 352.38 292.6 2 L
N
363.58 296.73 352.24 298.73 2 L
N
363.44 303.53 352.11 305.53 2 L
N
363.58 319.66 375.57 318 375.57 313 363.58 314.66 4 Y
7 X
V
0.5 H
0 X
N
363.58 312.91 375.57 311.24 375.57 306.24 363.58 307.91 4 Y
7 X
V
0 X
N
363.58 306.15 375.57 304.49 375.57 299.49 363.58 301.15 4 Y
7 X
V
0 X
N
363.58 299.4 375.57 297.73 375.57 292.73 363.58 294.4 4 Y
7 X
V
0 X
N
366.98 292 363.64 292.33 363.64 290 366.98 289.33 4 Y
7 X
V
0 X
N
351.64 293 351.64 328 2 L
2 H
N
351.71 319.34 379.38 316 379.38 281.34 351.71 284.67 4 Y
7 X
V
0.5 H
0 X
N
359.38 314.67 348.05 316.67 2 L
3 H
N
358.92 308.14 347.58 310.14 2 L
N
359.45 288.27 348.12 290.27 2 L
N
359.32 294.4 347.98 296.4 2 L
N
359.18 301.2 347.85 303.2 2 L
N
359.32 317.34 371.31 315.67 371.31 310.67 359.32 312.34 4 Y
7 X
V
0.5 H
0 X
N
359.32 310.58 371.31 308.92 371.31 303.92 359.32 305.58 4 Y
7 X
V
0 X
N
359.32 303.83 371.31 302.16 371.31 297.16 359.32 298.83 4 Y
7 X
V
0 X
N
359.32 297.07 371.31 295.4 371.31 290.4 359.32 292.07 4 Y
7 X
V
0 X
N
362.71 289.67 359.38 290 359.38 287.67 362.71 287.01 4 Y
7 X
V
0 X
N
347.38 290.67 347.38 325.67 2 L
2 H
N
347.45 317.01 375.12 313.68 375.12 279.01 347.45 282.34 4 Y
7 X
V
0.5 H
0 X
N
355.12 312.34 343.79 314.34 2 L
2 H
N
354.65 305.81 343.32 307.81 2 L
N
355.19 285.94 343.86 287.94 2 L
N
355.05 292.08 343.72 294.08 2 L
N
354.92 298.88 343.59 300.88 2 L
N
355.05 315.01 367.05 313.34 367.05 308.34 355.05 310.01 4 Y
7 X
V
0.5 H
0 X
N
355.05 308.25 367.05 306.59 367.05 301.59 355.05 303.26 4 Y
7 X
V
0 X
N
355.05 301.5 367.05 299.83 367.05 294.83 355.05 296.5 4 Y
7 X
V
0 X
N
355.05 294.74 367.05 293.08 367.05 288.08 355.05 289.74 4 Y
7 X
V
0 X
N
358.45 287.34 355.12 287.68 355.12 285.34 358.45 284.68 4 Y
7 X
V
0 X
N
322.12 321.01 337.79 318.68 337.79 311.01 322.12 313.34 4 Y
7 X
V
0 X
N
333.66 316.14 344.99 314.14 2 L
2 H
N
330.39 314.74 333.72 314.41 333.72 316.74 330.39 317.41 4 Y
7 X
V
0.5 H
0 X
N
343.12 288.34 343.12 323.34 2 L
2 H
N
343.31 323.63 355.88 330.2 2 L
N
330.13 317.22 316.8 319.56 2 L
N
516.89 323.99 544.55 320.66 544.55 285.99 516.89 289.33 4 Y
7 X
V
0.5 H
0 X
N
524.55 319.32 513.22 321.32 2 L
3 H
N
524.09 312.79 512.75 314.79 2 L
N
524.62 292.92 513.29 294.92 2 L
N
524.49 299.06 513.15 301.06 2 L
N
524.35 305.86 513.02 307.86 2 L
N
524.49 321.99 536.48 320.32 536.48 315.32 524.49 316.99 4 Y
7 X
V
0.5 H
0 X
N
524.49 315.23 536.48 313.57 536.48 308.57 524.49 310.23 4 Y
7 X
V
0 X
N
524.49 308.48 536.48 306.81 536.48 301.81 524.49 303.48 4 Y
7 X
V
0 X
N
524.49 301.73 536.48 300.06 536.48 295.06 524.49 296.73 4 Y
7 X
V
0 X
N
527.89 294.33 524.55 294.66 524.55 292.33 527.89 291.66 4 Y
7 X
V
0 X
N
512.55 295.33 512.55 330.32 2 L
2 H
N
512.63 321.66 540.29 318.33 540.29 283.67 512.63 287 4 Y
7 X
V
0.5 H
0 X
N
520.29 317 508.96 319 2 L
3 H
N
519.83 310.46 508.49 312.46 2 L
N
520.36 290.6 509.03 292.6 2 L
N
520.23 296.73 508.89 298.73 2 L
N
520.09 303.53 508.76 305.53 2 L
N
520.23 319.66 532.22 318 532.22 313 520.23 314.66 4 Y
7 X
V
0.5 H
0 X
N
520.23 312.91 532.22 311.24 532.22 306.24 520.23 307.91 4 Y
7 X
V
0 X
N
520.23 306.15 532.22 304.49 532.22 299.49 520.23 301.15 4 Y
7 X
V
0 X
N
520.23 299.4 532.22 297.73 532.22 292.73 520.23 294.4 4 Y
7 X
V
0 X
N
523.63 292 520.29 292.33 520.29 290 523.63 289.33 4 Y
7 X
V
0 X
N
508.29 293 508.29 328 2 L
2 H
N
508.37 319.34 536.03 316 536.03 281.34 508.37 284.67 4 Y
7 X
V
0.5 H
0 X
N
516.03 314.67 504.7 316.67 2 L
3 H
N
515.57 308.14 504.23 310.14 2 L
N
516.1 288.27 504.77 290.27 2 L
N
515.97 294.4 504.63 296.4 2 L
N
515.83 301.2 504.5 303.2 2 L
N
515.97 317.34 527.97 315.67 527.97 310.67 515.97 312.34 4 Y
7 X
V
0.5 H
0 X
N
515.97 310.58 527.97 308.92 527.97 303.92 515.97 305.58 4 Y
7 X
V
0 X
N
515.97 303.83 527.97 302.16 527.97 297.16 515.97 298.83 4 Y
7 X
V
0 X
N
515.97 297.07 527.97 295.4 527.97 290.4 515.97 292.07 4 Y
7 X
V
0 X
N
519.37 289.67 516.03 290 516.03 287.67 519.37 287.01 4 Y
7 X
V
0 X
N
504.03 290.67 504.03 325.67 2 L
2 H
N
504.11 317.01 531.77 313.68 531.77 279.01 504.11 282.34 4 Y
7 X
V
0.5 H
0 X
N
511.77 312.34 500.44 314.34 2 L
2 H
N
511.31 305.81 499.97 307.81 2 L
N
511.84 285.94 500.51 287.94 2 L
N
511.71 292.08 500.37 294.08 2 L
N
511.57 298.88 500.24 300.88 2 L
N
511.71 315.01 523.71 313.34 523.71 308.34 511.71 310.01 4 Y
7 X
V
0.5 H
0 X
N
511.71 308.25 523.71 306.59 523.71 301.59 511.71 303.26 4 Y
7 X
V
0 X
N
511.71 301.5 523.71 299.83 523.71 294.83 511.71 296.5 4 Y
7 X
V
0 X
N
511.71 294.74 523.71 293.08 523.71 288.08 511.71 289.74 4 Y
7 X
V
0 X
N
515.11 287.34 511.77 287.68 511.77 285.34 515.11 284.68 4 Y
7 X
V
0 X
N
478.77 321.01 494.44 318.68 494.44 311.01 478.77 313.34 4 Y
7 X
V
0 X
N
490.31 316.14 501.64 314.14 2 L
2 H
N
487.04 314.74 490.37 314.41 490.37 316.74 487.04 317.41 4 Y
7 X
V
0.5 H
0 X
N
499.77 288.34 499.77 323.34 2 L
2 H
N
499.96 323.63 512.53 330.2 2 L
N
486.78 317.22 473.45 319.56 2 L
N
0 18 Q
(. . .) 419.42 303.33 T
214 320.67 214 352.67 2 L
N
316.5 320.17 316.5 352.17 2 L
N
473 320.67 473 352.67 2 L
N
213.33 352.5 397.5 352.5 2 L
N
395.83 353.33 401.67 365.83 407.5 344.17 414.17 354.17 471.67 354.17 5 L
N
54 144 558 648 C
0 72 612 720 C
FMENDPAGE
%%EndPage: "2" 7
%%Page: "3" 7
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (The Control Area Network) 90.28 108.7 S
3 9 Q
0.09 (3) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (1) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
3 11 Q
0 X
-0.53 0.11 (to device or function being performed at the recipient. The operation that is to be) 198 640.67 B
0.11 (performed on the object, such as a read or write, and any associated object-spe-) 198 627.67 S
0.11 (ci\336c data is also included in the CAN message.) 198 614.67 S
-0.45 0.11 (The CAN packet consists of up to 10 bytes, of which 2 bytes are the packet head-) 198 593.67 B
-0.84 0.11 (er) 198 580.67 B
-0.84 0.11 (, 4 bytes are the object address, and 4 bytes are the optional object-speci\336c data.) 206.33 580.67 B
0.11 (The header de\336nes the source and destination nodes for the packet; the source) 198 567.67 S
-0.73 0.11 (and destination will always be on the same L-CAN. The object address de\336ne the) 198 554.67 B
-0.02 0.11 (absolute address \050in terms of cluster) 198 541.67 B
-0.02 0.11 (, module, node, and object\051 of the tar) 360.06 541.67 B
-0.02 0.11 (get ob-) 526.4 541.67 B
0.11 (ject, and also de\336ne the operation that is to be performed on that object \050e.g. a) 198 528.67 S
-0.55 0.11 (read, write, or a signal\051. Absolute addressing of the object is required by the rout-) 198 515.67 B
-0.18 0.11 (ing software when the source and destination nodes are on dif) 198 502.67 B
-0.18 0.11 (ferent L-CAN net-) 474.62 502.67 B
-0.44 0.11 (works; in this case the source node sends a message to its module controller) 198 489.67 B
-0.44 0.11 (, and) 534.09 489.67 B
-0.58 0.11 (the software running on the module controller determines from the full object ad-) 198 476.67 B
0.11 (dress the routing of the message, via the network hierarchy) 198 463.67 S
0.11 (, to the remote node.) 463.44 463.67 S
2 15 Q
0.15 (Network Protocol) 54 430 S
3 11 Q
-0.6 0.11 (The CAN uses a master/slave protocol in which most SP) 198 407.67 B
-0.6 0.11 (ARC processors are con-) 447.01 407.67 B
-0.32 0.11 (\336gured as slaves, and most board and module controllers \050i.e the H8 processors\051) 198 394.67 B
0.11 (are con\336gured as masters.) 198 381.67 S
-0.29 0.11 (Masters have the capability to read from and write to objects over the CAN, and) 198 360.67 B
-0.79 0.11 (thus have the capability to control and recon\336gure the machine. Slaves can signal) 198 347.67 B
-0.33 0.11 (to masters that they have information for their attention by sending a signal mes-) 198 334.67 B
0.11 (sage. A slave can be given the capability of a master by another master for spe-) 198 321.67 S
0.11 (ci\336c purposes, for example to enable a SP) 198 308.67 S
0.11 (ARC host to read/write the console) 386.02 308.67 S
-0.38 0.11 (object of another SP) 198 295.67 B
-0.38 0.11 (ARC. By assigning the role of masters to the H8 processors,) 287.58 295.67 B
0.11 (which are themselves controlled by \336rmware programme code, interference of) 198 282.67 S
0.11 (the CAN by user processes is prevented.) 198 269.67 S
0.11 (By default the masters \050the H8 controllers\051 receive all messages from the CAN) 198 248.67 S
-0.73 0.11 (and use \336lters on the CAN controllers to extract the messages appropriate to each) 198 235.67 B
0.11 (processor; this allows a broadcast capability to be de\336ned for the module and) 198 222.67 S
-0.36 0.11 (board controllers. Slave processors \050the SP) 198 209.67 B
-0.36 0.11 (ARCs\051 are con\336gured only to receive) 388.7 209.67 B
0.11 (messages that are explicitly tar) 198 196.67 S
0.11 (geted at them, which reduces CAN workload on) 336.96 196.67 S
0.11 (the SP) 198 183.67 S
0.11 (ARC processors.) 226.07 183.67 S
FMENDPAGE
%%EndPage: "3" 8
%%Page: "4" 8
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (4) 54 108.7 S
3 10 Q
0.1 (S1002\32010M140.00) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
2 14 Q
0 X
0 K
0.14 (Prioritisation) 126 638.67 S
3 11 Q
0.11 (Message priorities are used at two stages; during arbitration between CAN de-) 198 616.67 S
0.11 (vices on the L-CAN, and during routing between network levels by a routing) 198 603.67 S
-0.76 0.11 (processor) 198 590.67 B
-0.76 0.11 (. The two stages of prioritisation are represented by the two priority bits) 240.54 590.67 B
-0.29 0.11 (in the CAN message packet; the header de\336nes the priority between CAN devic-) 198 577.67 B
0.11 (es \050either 0 for high priority) 198 564.67 S
0.11 (, or 1 for low\051, and address data speci\336es the priori-) 323.09 564.67 S
0.11 (tisation for routed messages. A high priority message might indicate a power) 198 551.67 S
-0.48 0.11 (supply failure, whereas less ur) 198 538.67 B
-0.48 0.11 (gent messages \050switch errors\051 are recorded by low) 332.77 538.67 B
0.11 (priority messages. During routing the priority in the message\325) 198 525.67 S
0.11 (s address \336eld is) 475.82 525.67 S
0.11 (used to reduce congestion at the routers and on the X-CAN/G-CAN networks,) 198 512.67 S
-0.5 0.11 (and may be modi\336ed by the router processors to give highest priority to message) 198 499.67 B
-0.31 0.11 (responses and those making their way down the CAN hierarchy) 198 486.67 B
-0.31 0.11 (. Note that a low) 481.78 486.67 B
0.11 (priority message sent to a node can be overwritten by a high priority message,) 198 473.67 S
0.11 (causing the low priority message to be scrapped.) 198 460.67 S
2 14 Q
0.14 (Network Error Detection and Recovery) 126 431.67 S
3 11 Q
-0.48 0.11 (Packets are acknowledged \050ACK\325ed\051 if they reach their destination and are inter-) 198 409.67 B
0.11 (preted correctly) 198 396.67 S
0.11 (. A not-acknowledge \050NACK\051 is sent if they fail to be correctly) 268.38 396.67 S
0.11 (interpreted at their destination.) 198 383.67 S
0.11 (Reasons for failure are:) 198 362.67 S
0 14 Q
(\245) 198 341.67 T
3 11 Q
-0.04 0.11 (Bad message. Perhaps the sender attempted to write to a read-only object, or) 210.6 341.67 B
0.11 (an object that doesn\325) 210.6 328.27 S
0.11 (t exist.) 304.05 328.27 S
0 14 Q
(\245) 198 306.87 T
3 11 Q
0.11 (Hardware errors. Either the message or the acknowledgement failed.) 210.6 306.87 S
0 14 Q
(\245) 198 285.47 T
3 11 Q
0.11 (Hardware overruns. No spare input buf) 210.6 285.47 S
0.11 (fer at the transceiver) 386.75 285.47 S
0.11 (.) 478.67 285.47 S
-0.71 0.11 (Bad messages, or messages to non-existent objects, are signalled to the sender by) 198 264.07 B
0.11 (the return of a not-acknowledge packet.) 198 251.07 S
-0.05 0.11 (Hardware errors are detected using a timeout at the message sender) 198 230.07 B
-0.05 0.11 (. The expiry) 500.5 230.07 B
0.11 (of the timeout period indicates that the message and/or its acknowledgement) 198 217.07 S
0.11 (failed. The behaviour of the sender in this case is function speci\336c, but may be) 198 204.07 S
0.11 (to resend the message or to give-up.) 198 191.07 S
FMENDPAGE
%%EndPage: "4" 9
%%Page: "5" 9
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (The Control Area Network) 90.28 108.7 S
3 9 Q
0.09 (5) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (1) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
3 11 Q
0 X
-0.32 0.11 (Hardware overruns occur when a transceiver) 198 640.67 B
-0.32 0.11 (\325) 398.4 640.67 B
-0.32 0.11 (s two receive buf) 401.57 640.67 B
-0.32 0.11 (fers are full and a) 477.71 640.67 B
0.11 (message on the network is tar) 198 627.67 S
0.11 (geted at the device. The incoming message is ig-) 331.44 627.67 S
-0.18 0.11 (nored, and an interrupt is issued to the CAN device\325) 198 614.67 B
-0.18 0.11 (s controlling processor) 430.59 614.67 B
-0.18 0.11 (. The) 532.35 614.67 B
0.11 (sender of the message detects the failed transmission by the absence of an ac-) 198 601.67 S
0.11 (knowledgement within its timeout period.) 198 588.67 S
0.11 (The CAN transceivers maintain a count of input and output errors using two) 198 567.67 S
0.11 (counters. The transceivers are initialised with two threshold values called the) 198 554.67 S
1 F
-0.86 0.11 (warning) 198 541.67 B
3 F
-0.86 0.11 ( limit and the) 235.44 541.67 B
1 F
-0.86 0.11 (bus-off) 294.78 541.67 B
3 F
-0.86 0.11 ( limit at which the number of errors becomes serious) 326.11 541.67 B
-0.65 0.11 (and requires attention. When a count reaches the warning limit an error \337ag is set) 198 528.67 B
-0.87 0.11 (and the attached processor is interrupted, but the transceiver continues to operate.) 198 515.67 B
-0.85 0.11 (On reaching the bus-of) 198 502.67 B
-0.85 0.11 (f limit the transceiver goes into a permanent reset state and) 298.77 502.67 B
0.11 (is no longer operational. The accumulation of not-acknowledge errors cannot) 198 489.67 S
-0.68 0.11 (force the transceiver into a bus-of) 198 476.67 B
-0.68 0.11 (f state, to accommodate the case at system start-) 346.38 476.67 B
0.11 (up where a transceiver may become operational in advance of its peers.) 198 463.67 S
2 15 Q
0.15 (Example \321 Snooping the CAN) 54 430 S
3 11 Q
0.11 (The) 198 407.67 S
6 F
0.11 (cansnoop) 218.29 407.67 S
3 F
0.11 (\0501m\051 command can be used by the root user to monitor the ac-) 271.97 407.67 S
-0.26 0.11 (tivity on the local CAN. The following example output shows some of the CAN) 198 394.67 B
0.11 (traf) 198 381.67 S
0.11 (\336c that is generated when a console connection is created via the CAN with) 213.51 381.67 S
0.11 (either Pandora or) 198 368.67 S
6 F
0.11 (cancon) 278.49 368.67 S
3 F
0.11 (\0501m\051. The following example has been edited \050for) 318.74 368.67 S
-0.25 0.11 (clarity\051 to remove the numerous heartbeat signals which are sent between nodes) 198 355.67 B
0.11 (to signal their continuing operation.) 198 342.67 S
-0.68 0.11 (In the following output the initial 2 digit \336eld is a feature of) 198 321.67 B
6 F
-1.6 0.11 (cansnoop) 461.81 321.67 B
3 F
-0.68 0.11 (\0501m\051 and) 515.49 321.67 B
-0.55 0.11 (represents a microsecond time stamp; subsequent \336elds represent the contents of) 198 308.67 B
0.11 (the CAN packets. The second \336eld identi\336es the source and destination CAN) 198 295.67 S
-0.72 0.11 (nodes \050the packet header\051, the third \336eld identi\336es the message type \050WO= write,) 198 282.67 B
0.11 (ACK = acknowledge, D = data\051, the next group of 4 \336elds is the full object ad-) 198 269.67 S
-0.23 0.11 (dress \050with key object id\325) 198 256.67 B
-0.23 0.11 (s replaced by an ASCII mnemonic\051, and the remaining) 311.16 256.67 B
0.11 (\336elds being the optional 4 bytes of data and their ASCII representation.) 198 243.67 S
-0.31 0.11 (The output shows node 008 sending a packet to the console connection object at) 198 222.67 B
0.11 (node 004; the data \336eld identi\336es the initiator of the connection and the object) 198 209.67 S
0.11 (that is to be used for subsequent communications. The connection request is ac-) 198 196.67 S
0.11 (knowledged by node 004.) 198 183.67 S
FMENDPAGE
%%EndPage: "5" 10
%%Page: "6" 10
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (6) 54 108.7 S
3 10 Q
0.1 (S1002\32010M140.00) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
3 11 Q
0 X
0 K
0.11 (Following the initial handshaking characters typed at the keyboard are sent via) 198 640.67 S
0.11 (the CAN to the remote console port. Each typed character is acknowledged by) 198 627.67 S
0.11 (node 004 and echoed back to node 008. The connection is dropped by a write) 198 614.67 S
0.11 (from node 008 to node 004\325) 198 601.67 S
0.11 (s console disconnect object.) 323.38 601.67 S
6 9 Q
(111.870 008->004  WO  00,02,04 CONSOLECONN 30 02 23 82 \3240.#.\325) 208.5 579 T
(111.897 004->008  ACK 00,02,04 03f0        ff ff ff ff \324....\325) 208.5 568 T
(122.335 008->004  D   00,02,04 0000        0d          \324.\325) 208.5 557 T
(122.335 004->008  ACK 00,02,04 0000) 208.5 546 T
(122.336 004->008  D   00,02,08 0382        0d 0a       \324..\325) 208.5 535 T
(122.336 008->004  ACK 00,02,08 0382) 208.5 524 T
(122.340 004->008  D   00,02,08 0382        6e 6f 76 61 \324nova\325) 208.5 513 T
(122.341 008->004  ACK 00,02,08 0382) 208.5 502 T
(122.341 004->008  D   00,02,08 0382        31 20 63 6f \3241 co\325) 208.5 491 T
(122.341 008->004  ACK 00,02,08 0382) 208.5 480 T
(122.341 004->008  D   00,02,08 0382        6e 73 6f 6c \324nsol\325) 208.5 469 T
(122.341 008->004  ACK 00,02,08 0382) 208.5 458 T
(122.342 004->008  D   00,02,08 0382        65 20 6c 6f \324e lo\325) 208.5 447 T
(122.342 008->004  ACK 00,02,08 0382) 208.5 436 T
(122.342 004->008  D   00,02,08 0382        67 69 6e 3a \324gin:\325) 208.5 425 T
(122.342 008->004  ACK 00,02,08 0382) 208.5 414 T
(138.993 004->008  D   00,02,08 0382        36 5d 23 20 \3246]# \324) 208.5 381 T
(138.993 008->004  ACK 00,02,08 0382) 208.5 370 T
(138.993 004->008  D   00,02,08 0382        65 78 69 74 \324exit\325) 208.5 359 T
(138.993 008->004  ACK 00,02,08 0382) 208.5 348 T
(138.994 004->008  D   00,02,08 0382        0d 0a       \324..\325) 208.5 337 T
(138.994 008->004  ACK 00,02,08 0382) 208.5 326 T
(144.698 004->008  D   00,02,08 0382        0d 0d 0a    \324...\325) 208.5 315 T
(144.698 008->004  ACK 00,02,08 0382) 208.5 304 T
(144.702 004->008  D   00,02,08 0382        6e 6f 76 61 \324nova\325) 208.5 293 T
(144.702 008->004  ACK 00,02,08 0382) 208.5 282 T
(144.702 004->008  D   00,02,08 0382        31 20 63 6f \3241 co\325) 208.5 271 T
(144.702 008->004  ACK 00,02,08 0382) 208.5 260 T
(144.703 004->008  D   00,02,08 0382        6e 73 6f 6c \324nsol\325) 208.5 249 T
(144.703 008->004  ACK 00,02,08 0382) 208.5 238 T
(144.703 004->008  D   00,02,08 0382        65 20 6c 6f \324e lo\325) 208.5 227 T
(144.703 008->004  ACK 00,02,08 0382) 208.5 216 T
(144.704 004->008  D   00,02,08 0382        67 69 6e 3a \324gin:\325) 208.5 205 T
(144.704 008->004  ACK 00,02,08 0382) 208.5 194 T
(144.704 004->008  D   00,02,08 0382        20          \324 \324) 208.5 183 T
(144.704 008->004  ACK 00,02,08 0382) 208.5 172 T
(149.177 008->004  WO  00,02,04 CONSOLEDISC 30 02 23 82 \3240.#.\325) 208.5 161 T
(149.203 004->008  ACK 00,02,04 03f1        30 02 23 82 \3240.#.\325) 208.5 150 T
200.5 585.88 200.5 146.12 2 L
V
0.25 H
0 Z
N
558 585.88 558 146.12 2 L
V
N
200.38 586 558.12 586 2 L
V
N
200.38 146 558.12 146 2 L
V
N
FMENDPAGE
%%EndPage: "6" 11
%%Page: "7" 11
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (The Control Area Network) 90.28 108.7 S
3 9 Q
0.09 (7) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (1) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
2 15 Q
0 X
0.15 (Appendix A \321 Packet Format) 54 638 S
3 11 Q
-0.21 0.11 (CAN packets are 10 bytes in length consisting of 2 bytes of header information,) 198 615.67 B
0.11 (4 bytes address data, and an optional 4 bytes of message data.) 198 602.67 S
2 14 Q
0.14 (Header Data) 126 573.67 S
3 11 Q
-0.52 0.11 (The 2 byte message header identi\336es the source node, destination node, and mes-) 198 551.67 B
0.11 (sage priority) 198 538.67 S
0.11 (.) 254.01 538.67 S
0 F
0.11 (Figur) 198 517.67 S
0.11 (e 1-3) 224.63 517.67 S
0.11 (Message Header \0502 bytes\051) 261 517.67 S
3 F
0.11 (The \336elds in the packet header have the following meanings:) 198 370.28 S
0.11 (W) 198 201.28 S
0.11 (ithin a module CAN node ids are allocated as shown in Figure 1-5.) 208.05 201.28 S
0 F
0.11 (Bit\050s\051) 198 345.28 S
0.11 (Meaning) 235.67 345.28 S
3 F
0.11 (15) 214.45 326.28 S
0.11 (Message priority \050for arbitration on the L-CAN\051. 0 is high, 1 is low) 235.67 326.28 S
0.11 (.) 538.17 326.28 S
0.11 (14-10) 199.45 307.28 S
0.11 (Destination CAN node id. \050in the range 0\32029\051.) 235.67 307.28 S
0.11 (9-5) 210.67 288.28 S
0.11 (Source CAN node id. \050in the range 0\32029\051.) 235.67 288.28 S
0.11 (4) 220.06 269.28 S
0.11 (Remote transmission request \050always 1 for the CS-2\051.) 235.67 269.28 S
0.11 (3-0) 210.67 250.28 S
0.11 (Length of following data. This will be either 4 or 8 for the CS-2; 4) 235.67 250.28 S
0.11 (bytes are required for the address data, and an optional 4 bytes for) 235.67 237.28 S
0.11 (object-speci\336c data.) 235.67 224.28 S
54 144 558 648 C
201.13 392.62 558 514 C
249.19 477.83 263.37 492 R
7 X
0 K
V
0.5 H
2 Z
0 X
N
263.37 477.83 277.54 492 R
7 X
V
0 X
N
277.54 477.83 291.71 492 R
7 X
V
0 X
N
291.71 477.83 305.89 492 R
7 X
V
0 X
N
305.89 477.83 320.06 492 R
7 X
V
0 X
N
320.06 477.83 334.23 492 R
7 X
V
0 X
N
334.23 477.83 348.41 492 R
7 X
V
0 X
N
348.41 477.83 362.58 492 R
7 X
V
0 X
N
362.58 477.83 376.75 492 R
7 X
V
0 X
N
376.75 477.83 390.93 492 R
7 X
V
0 X
N
390.93 477.83 405.1 492 R
7 X
V
0 X
N
405.1 477.83 419.27 492 R
7 X
V
0 X
N
419.27 477.83 433.45 492 R
7 X
V
0 X
N
433.45 477.83 447.62 492 R
7 X
V
0 X
N
447.62 477.83 461.79 492 R
7 X
V
0 X
N
461.79 477.83 475.97 492 R
7 X
V
0 X
N
3 11 Q
(P) 253.22 481.17 T
(D) 266.48 481.17 T
(D) 280.66 481.17 T
(D) 294.83 481.17 T
(D) 309 481.17 T
(D) 323.18 481.17 T
(S) 338.26 481.17 T
(S) 352.43 481.17 T
(S) 366.61 481.17 T
(S) 380.78 481.17 T
(S) 394.95 481.17 T
(R) 408.52 481.17 T
(L) 423 481.17 T
(L) 437.17 481.17 T
(L) 451.35 481.17 T
(L) 465.52 481.17 T
362.39 507.83 362.39 478.67 2 L
1 H
N
7 9 Q
(7) 367.17 497.83 T
(0) 466.38 497.83 T
(1) 452.2 497.83 T
(2) 438.03 497.83 T
(3) 423.86 497.83 T
(4) 409.68 497.83 T
(5) 395.51 497.83 T
(6) 381.34 497.83 T
(15) 251.28 497.83 T
(8) 352.99 497.83 T
(9) 338.82 497.83 T
(10) 324.64 497.83 T
(1) 310.47 497.83 T
(1) 314.81 497.83 T
(12) 296.3 497.83 T
(13) 282.12 497.83 T
(14) 267.95 497.83 T
3 11 Q
(Priority) 236.56 434.5 T
(Destination CAN node) 256.56 413.67 T
(Source CAN node) 336.56 434.5 T
(Remote transmission) 408.65 413.67 T
(Data length) 468.22 434.5 T
250.97 463.48 255.72 474.5 257.53 462.64 254.25 463.06 4 Y
V
254.25 463.06 251.56 442 2 L
0.5 H
N
270.72 472.83 327.39 472.83 2 L
N
302.42 461.3 305.72 472.83 309.03 461.3 305.72 461.3 4 Y
V
305.72 461.3 305.72 422.83 2 L
N
340.72 472.83 397.39 472.83 2 L
N
369.92 461.3 373.22 472.83 376.53 461.3 373.22 461.3 4 Y
V
373.22 461.3 373.22 446.17 2 L
N
(request) 439.06 402.67 T
415.9 463.32 411.55 474.5 421.16 467.32 418.53 465.32 4 Y
V
449.89 423.67 418.54 465.32 2 L
N
425.72 472.83 469.06 472.83 2 L
N
455.14 463.68 447.38 472.83 458.81 469.19 456.97 466.44 4 Y
V
456.99 466.43 489.06 445.33 2 L
N
54 144 558 648 C
0 72 612 720 C
FMENDPAGE
%%EndPage: "7" 12
%%Page: "8" 12
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (8) 54 108.7 S
3 10 Q
0.1 (S1002\32010M140.00) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
2 14 Q
0 X
0 K
0.14 (Address Data) 126 638.67 S
3 11 Q
0.11 (The action performed at the destination node is speci\336ed by the address data.) 198 616.67 S
-0.5 0.11 (This de\336nes the message type \050W) 198 603.67 B
-0.5 0.11 (rite to object, read from object etc.\051, and the ad-) 346.63 603.67 B
0.11 (dress of the object that is to be tar) 198 590.67 S
0.11 (geted.) 350.35 590.67 S
0 F
0.11 (Figur) 198 569.67 S
0.11 (e 1-4) 224.63 569.67 S
0.11 (Object Addr) 261 569.67 S
0.11 (essing \0504 bytes\051) 321.59 569.67 S
3 F
0.11 (The \336elds in the address data have the following meanings:) 198 433.17 S
0 F
0.11 (Bit\050s\051) 198 408.17 S
0.11 (Meaning) 237.33 408.17 S
3 F
0.11 (31) 216.11 389.17 S
0.11 (Message priority for arbitration by the X-CAN/G-CAN routers. 0 is) 237.33 389.17 S
0.11 (high, 1 is low) 237.33 376.17 S
0.11 (.) 298.05 376.17 S
0.11 (30-28) 201.12 357.17 S
0.11 (Message type \050see below\051.) 237.33 357.17 S
0.11 (27-0) 206.73 338.17 S
0.11 (The address of the object that the transaction is to apply to. This if a) 237.33 338.17 S
-0.4 0.11 (full machine address consisting of a 6 bit cluster id, 6 bit module id, a) 237.33 325.17 B
0.11 (6 bit node id, and a 10 bit object id. A broadcast is speci\336ed by) 237.33 312.17 S
-0.06 0.11 (1) 237.33 299.17 B
-0.06 0.11 (1) 242.54 299.17 B
-0.06 0.11 (1) 247.74 299.17 B
-0.06 0.11 (1) 252.94 299.17 B
-0.06 0.11 (10; 1) 258.14 299.17 B
-0.06 0.11 (1) 280.53 299.17 B
-0.06 0.11 (1) 285.74 299.17 B
-0.06 0.11 (1) 290.94 299.17 B
-0.06 0.11 (1) 296.14 299.17 B
-0.06 0.11 (1 means never route to this level. Object id\325) 301.35 299.17 B
-0.06 0.11 (s are listed) 497.96 299.17 B
-0.19 0.11 (in the header \336les) 237.33 286.17 B
6 F
-0.44 0.11 (/usr/include/sys/cankobj.h) 319.32 286.17 B
3 F
-0.19 0.11 ( and) 493.78 286.17 B
6 F
-0.44 0.11 (/opt/) 515.34 286.17 B
0.11 (MEIKOcs2/etc/include/canio/canobj.h) 237.33 273.17 S
3 F
0.11 (.) 472.18 273.17 S
54 144 558 648 C
65.32 455.51 558 566 C
3 11 Q
0 X
0 K
(Object address \050cluster) 232.62 476.44 T
(, module, node, and object ids\051) 332.99 476.44 T
159.38 519.78 541.88 519.78 2 L
0.5 H
2 Z
N
347.33 508.24 350.63 519.78 353.94 508.24 350.63 508.24 4 Y
V
350.63 508.24 350.63 489 2 L
N
321.98 524.77 336.15 538.95 R
7 X
V
0 X
N
336.16 524.77 350.33 538.95 R
7 X
V
0 X
N
350.33 524.77 364.5 538.95 R
7 X
V
0 X
N
364.5 524.77 378.68 538.95 R
7 X
V
0 X
N
378.67 524.77 392.85 538.95 R
7 X
V
0 X
N
392.85 524.77 407.02 538.95 R
7 X
V
0 X
N
407.02 524.77 421.2 538.95 R
7 X
V
0 X
N
421.2 524.77 435.37 538.95 R
7 X
V
0 X
N
(A) 323.35 528.11 T
3 7 Q
(n) 331.29 531.71 T
3 11 Q
(A) 337.52 528.11 T
3 7 Q
(n) 345.46 531.71 T
3 11 Q
(A) 351.69 528.11 T
3 7 Q
(n) 359.64 531.71 T
3 11 Q
(A) 365.87 528.11 T
3 7 Q
(n) 373.81 531.71 T
3 11 Q
(A) 380.04 528.11 T
3 7 Q
(n) 387.98 531.71 T
3 11 Q
(A) 394.21 528.11 T
3 7 Q
(n) 402.16 531.71 T
3 11 Q
(A) 408.39 528.11 T
3 7 Q
(o) 416.33 531.71 T
3 11 Q
(A) 422.56 528.11 T
3 7 Q
(o) 430.5 531.71 T
435.18 554.78 435.18 525.61 2 L
1 H
N
7 9 Q
(15) 324.07 544.78 T
(8) 425.78 544.78 T
(9) 411.61 544.78 T
(10) 397.43 544.78 T
(1) 383.26 544.78 T
(1) 387.6 544.78 T
(12) 369.09 544.78 T
(13) 354.91 544.78 T
(14) 340.74 544.78 T
435.37 524.77 449.54 538.95 R
7 X
V
0.5 H
0 X
N
449.54 524.77 463.71 538.95 R
7 X
V
0 X
N
463.71 524.77 477.89 538.95 R
7 X
V
0 X
N
477.89 524.77 492.06 538.95 R
7 X
V
0 X
N
492.06 524.77 506.23 538.95 R
7 X
V
0 X
N
506.23 524.77 520.41 538.95 R
7 X
V
0 X
N
520.41 524.77 534.58 538.95 R
7 X
V
0 X
N
534.58 524.77 548.75 538.95 R
7 X
V
0 X
N
3 11 Q
(A) 436.73 528.11 T
3 7 Q
(o) 444.68 531.71 T
3 11 Q
(A) 450.91 528.11 T
3 7 Q
(o) 458.85 531.71 T
3 11 Q
(A) 465.08 528.11 T
3 7 Q
(o) 473.02 531.71 T
3 11 Q
(A) 479.25 528.11 T
3 7 Q
(o) 487.2 531.71 T
3 11 Q
(A) 493.43 528.11 T
3 7 Q
(o) 501.37 531.71 T
3 11 Q
(A) 507.6 528.11 T
3 7 Q
(o) 515.54 531.71 T
3 11 Q
(A) 521.77 528.11 T
3 7 Q
(o) 529.72 531.71 T
3 11 Q
(A) 535.95 528.11 T
3 7 Q
(o) 543.89 531.71 T
7 9 Q
(7) 439.95 544.78 T
(0) 539.16 544.78 T
(1) 524.99 544.78 T
(2) 510.82 544.78 T
(3) 496.65 544.78 T
(4) 482.47 544.78 T
(5) 468.3 544.78 T
(6) 454.13 544.78 T
208.6 524.77 222.77 538.95 R
7 X
V
0 X
N
222.77 524.77 236.94 538.95 R
7 X
V
0 X
N
236.94 524.77 251.12 538.95 R
7 X
V
0 X
N
251.12 524.77 265.29 538.95 R
7 X
V
0 X
N
265.29 524.77 279.46 538.95 R
7 X
V
0 X
N
279.46 524.77 293.64 538.95 R
7 X
V
0 X
N
293.64 524.77 307.81 538.95 R
7 X
V
0 X
N
307.81 524.77 321.98 538.95 R
7 X
V
0 X
N
3 11 Q
(A) 210.16 528.11 T
3 7 Q
(c) 218.1 531.71 T
3 11 Q
(A) 224.33 528.11 T
3 7 Q
(c) 232.27 531.71 T
3 11 Q
(A) 237.34 528.11 T
3 7 Q
(m) 245.28 531.71 T
3 11 Q
(A) 251.51 528.11 T
3 7 Q
(m) 259.45 531.71 T
3 11 Q
(A) 265.68 528.11 T
3 7 Q
(m) 273.62 531.71 T
3 11 Q
(A) 279.86 528.11 T
3 7 Q
(m) 287.8 531.71 T
3 11 Q
(A) 294.03 528.11 T
3 7 Q
(m) 301.97 531.71 T
3 11 Q
(A) 308.2 528.11 T
3 7 Q
(m) 316.14 531.71 T
321.79 554.78 321.79 525.61 2 L
1 H
N
7 9 Q
(23) 210.68 544.78 T
(16) 309.89 544.78 T
(17) 298.22 544.78 T
(18) 284.05 544.78 T
(19) 269.87 544.78 T
(20) 255.7 544.78 T
(21) 241.53 544.78 T
(22) 227.35 544.78 T
95.21 524.77 109.38 538.95 R
7 X
V
0.5 H
0 X
N
109.38 524.77 123.56 538.95 R
7 X
V
0 X
N
123.56 524.77 137.73 538.95 R
7 X
V
0 X
N
137.73 524.77 151.9 538.95 R
7 X
V
0 X
N
151.9 524.77 166.08 538.95 R
7 X
V
0 X
N
166.08 524.77 180.25 538.95 R
7 X
V
0 X
N
180.25 524.77 194.42 538.95 R
7 X
V
0 X
N
194.42 524.77 208.6 538.95 R
7 X
V
0 X
N
3 11 Q
(P) 99.24 528.11 T
(T) 113.11 528.11 T
(T) 127.28 528.11 T
(T) 141.46 528.11 T
(A) 153.46 528.11 T
3 7 Q
(c) 161.41 531.71 T
3 11 Q
(A) 167.64 528.11 T
3 7 Q
(c) 175.58 531.71 T
3 11 Q
(A) 181.81 528.11 T
3 7 Q
(c) 189.75 531.71 T
3 11 Q
(A) 195.99 528.11 T
3 7 Q
(c) 203.93 531.71 T
208.41 554.78 208.41 525.61 2 L
1 H
N
7 9 Q
(31) 97.29 544.78 T
(24) 196.51 544.78 T
(25) 184.84 544.78 T
(26) 170.66 544.78 T
(27) 156.49 544.78 T
(28) 142.32 544.78 T
(29) 128.14 544.78 T
(30) 113.97 544.78 T
3 11 Q
(Priority) 74.57 476.44 T
(Message type) 118.74 476.44 T
144.57 519.83 115.4 519.83 2 L
0.5 H
N
127.1 508.3 130.4 519.83 133.71 508.3 130.4 508.3 4 Y
V
130.4 508.3 130.4 489.83 2 L
N
98.43 509.46 101.74 521 105.04 509.46 101.74 509.46 4 Y
V
101.74 509.46 101.74 491 2 L
N
54 144 558 648 C
0 72 612 720 C
FMENDPAGE
%%EndPage: "8" 13
%%Page: "9" 13
612 792 0 FMBEGINPAGE
3 10 Q
0 X
0 K
0.1 (The Control Area Network) 90.28 108.7 S
3 9 Q
0.09 (9) 553.41 108.7 S
54 102.7 87.68 120.7 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 54.34 106.33 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
1 20 Q
0 X
0 K
0.2 (1) 542.41 680.03 S
558 675 54 675 2 L
0.3 H
2 Z
N
185 83.74 393.76 101.24 R
7 X
V
3 11 Q
0 X
0.11 (Message types are:) 198 640.67 S
0 F
0.11 (Id) 198 615.67 S
0.11 (Meaning) 234 615.67 S
3 F
0.11 (000) 198 596.67 S
-0.11 0.11 (Read request; the address identi\336es an object to be read. For use by) 234 596.67 B
0.11 (master CAN nodes only \050typically the H8 processors\051.) 234 583.67 S
0.11 (001) 198 564.67 S
0.11 (W) 234 564.67 S
0.11 (rite request; the address identi\336es the object to be written to. For) 244.05 564.67 S
0.11 (use by master CAN nodes only \050typically the H8 processors\051.) 234 551.67 S
0.11 (010) 198 532.67 S
0.11 (W) 234 532.67 S
0.11 (rite request without acknowledge from destination; the address) 244.05 532.67 S
0.11 (identi\336es the object to be written to. For use by master CAN nodes) 234 519.67 S
0.11 (only \050typically the H8 processors\051.) 234 506.67 S
0.11 (01) 198 487.67 S
0.11 (1) 208.81 487.67 S
0.11 (Data.) 234 487.67 S
0.11 (100) 198 468.67 S
0.11 (W) 234 468.67 S
0.11 (rite acknowledge.) 244.05 468.67 S
0.11 (101) 198 449.67 S
0.11 (Unused.) 234 449.67 S
0.11 (1) 198 430.67 S
0.11 (10) 203.2 430.67 S
0.11 (W) 234 430.67 S
0.11 (rite a not-acknowledgement.) 244.05 430.67 S
0.11 (1) 198 411.67 S
0.11 (1) 203.2 411.67 S
0.11 (1) 208.41 411.67 S
0.11 (Send a signal. The data \336eld de\336nes the object that has changed) 234 411.67 S
-0.67 0.11 (\050using the least signi\336cant 10bits of the 4byte data \336eld\051; the address) 234 398.67 B
0.11 (\336eld includes the broadcast code \0501) 234 385.67 S
0.11 (1) 392.94 385.67 S
0.11 (1) 398.14 385.67 S
0.11 (1) 403.34 385.67 S
0.11 (10\051 in the node, and/or) 408.55 385.67 S
0.11 (module and/or cluster \336elds. This is used by CAN slave nodes to) 234 372.67 S
-0.22 0.11 (notify CAN masters that an object has changed. At least one master) 234 359.67 B
0.11 (should read the changed object. The signal is repeated at regular) 234 346.67 S
0.11 (intervals \050the timeout period\051 until at least one master queries the) 234 333.67 S
0.11 (object. Signals are not directly acknowledged.) 234 320.67 S
FMENDPAGE
%%EndPage: "9" 14
%%Page: "10" 14
612 792 0 FMBEGINPAGE
3 9 Q
0 X
0 K
0.09 (10) 54 108.7 S
3 10 Q
0.1 (S1002\32010M140.00) 443.55 108.7 S
558 675 54 675 2 L
0.3 H
2 Z
N
1 20 Q
0.2 (1) 57.9 680.03 S
185 83.74 393.76 101.24 R
7 X
V
531.18 102.43 571.86 120.43 C
0 -322.62 -285.88 229.38 1.12 131.84 70.12 532.77 107.69 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.8.3
%%For: (helen) (good)
%%Title: (meiko_logo_prev.art)
%%CreationDate: (23/2/93) (2:59 pm)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%BoundingBox:-322.625 -285.875 229.375 1.125
%%TemplateBox:-35.625 88.125 -35.625 88.125
%%TileBox:-875.625 448.125 -323.625 1178.125
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%EndSetup
0 O
0 g
0 i 0 J 0 j 1 w 10 M []0 d
%%Note:
-277.115 -266.46 m
-262.535 -266.35 -261.075 -266.4 v
-259.61 -266.445 -258.76 -265.65 -258.435 -264.105 C
-256.96 -258.2 L
-255.435 -247.905 -273.565 -242.365 -279.505 -256 C
-283.285 -270.8 L
-285.28 -277.26 -280.075 -280.105 -276.565 -280.415 C
-257.12 -280.415 L
-255.425 -280.595 -253.505 -277.9 -253.43 -276.26 C
-246.76 -251.39 L
-246.405 -249.02 -248.87 -246.01 -251.545 -249.31 C
-259.19 -275.5 l
-275.835 -275.43 L
-277.625 -275.19 -279.19 -274.565 -278.54 -271.32 C
-277.115 -266.46 l
f
1 g
-275.125 -261.44 m
-263.565 -261.44 L
-262.935 -258.99 -260.19 -253.73 -267.315 -253.315 c
-274.445 -252.895 -275.2 -260.885 -275.125 -261.44 c
f
0 g
-309.27 -253.38 m
-316.06 -279.07 L
-316.675 -281.149 -321.2 -280.95 -320.81 -277.395 C
-313.47 -250.31 L
-313.53 -249.305 -312.035 -248.345 -311.125 -248.465 C
-288.69 -248.465 L
-286.31 -248.545 -281.84 -251.8 -282.98 -258.63 C
-288.315 -279.06 L
-289.125 -281.41 -293.865 -280.57 -293.04 -277.67 C
-287.805 -257.835 L
-287.2 -256.115 -288.035 -253.705 -289.765 -253.375 C
-295.535 -253.37 l
-302.225 -278.88 L
-302.74 -280.775 -307.31 -281.64 -306.995 -277.625 C
-300.66 -253.385 l
-309.27 -253.38 l
f
-224.28 -251.625 m
-240.98 -263.9 l
-230.33 -277.16 L
-229.665 -279.1 -231.66 -281.319 -233.635 -280.165 C
-246.675 -264.445 L
-247.56 -263.595 -246.78 -262.155 -246.12 -261.535 C
-226.9 -247.785 L
-225.955 -246.9 -222.35 -248.575 -224.28 -251.625 c
f
-202.815 -260.795 m
-205.73 -271.685 L
-208.845 -282.845 -229.965 -284.714 -228.175 -269.125 C
-224.94 -256.96 L
-222.74 -245.675 -199.87 -243.585 -202.815 -260.795 c
f
1 g
-208.25 -259.25 m
-211.375 -270.815 L
-212.885 -275.495 -222.485 -278.045 -222.625 -269.875 C
-219.5 -257.69 L
-217.94 -253 -207.29 -250.86 -208.25 -259.25 c
f
-321.625 0.125 m
F
228.375 0.125 m
F
0 A
u
0 g
-247.315 -246.185 m
-245.73 -246.185 -244.44 -244.9 -244.44 -243.315 c
-244.44 -241.73 -245.73 -240.44 -247.315 -240.44 c
-248.9 -240.44 -250.185 -241.73 -250.185 -243.315 c
-250.185 -244.9 -248.9 -246.185 -247.315 -246.185 c
f
-247.315 -243.315 m
F
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 72 612 720 C
0 11 Q
0 X
0 K
0.11 (Figur) 198 640.67 S
0.11 (e 1-5) 224.63 640.67 S
0.11 (CAN Addr) 261 640.67 S
0.11 (esses within a Module) 313.32 640.67 S
54 144 558 648 C
197.97 412.16 558 637 C
221 439 243 598 R
0.5 H
2 Z
0 X
0 K
N
243 439 265 598 R
N
265 439 287 598 R
N
287 439 309 598 R
N
221 415 309 460 R
N
3 11 Q
(0) 295.25 576 T
(1) 295.25 544 T
(2) 295.25 512 T
(3) 295.25 480 T
(10) 292.5 447 T
(4) 272.25 576 T
(5) 272.25 544 T
(6) 272.25 512 T
(7) 272.25 480 T
(1) 269.7 447 T
(1) 274.8 447 T
(8) 250.25 576 T
(9) 250.25 544 T
(a) 250.25 512 T
(b) 250.25 480 T
(12) 247.5 447 T
(c) 229.25 576 T
(d) 229.25 544 T
(e) 229.25 512 T
(f) 229.25 480 T
(13) 226.5 447 T
(1d) 259.5 423 T
301.31 613.54 298 602 294.69 613.54 298 613.54 4 Y
V
298 613.54 298 627 361 576 3 L
N
(CAN addresses for processor) 326 564 T
(board 0 \050up to 4 processors per board\051) 326 553 T
(CAN address for board controller \050H8\051) 326 509 T
(for processor board 0.) 326 498 T
(CAN address for the module) 326 447 T
(controller \050H8\051) 326 436 T
313.87 463.09 305 455.01 308.24 466.56 311.05 464.82 4 Y
V
311.06 464.82 327 491 2 L
N
295.85 426.88 284 425.01 293.06 432.87 294.45 429.87 4 Y
V
323 443 294.46 429.87 2 L
N
54 144 558 648 C
0 72 612 720 C
FMENDPAGE
%%EndPage: "10" 15
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 14 1
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-BoldItalic
%%+ Times-Roman
%%+ Palatino-Italic
%%+ Palatino-Roman
%%+ Courier
%%+ Helvetica
